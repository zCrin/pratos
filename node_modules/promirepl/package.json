{
  "_args": [
    [
      {
        "raw": "promirepl@^1.0.1",
        "scope": null,
        "escapedName": "promirepl",
        "name": "promirepl",
        "rawSpec": "^1.0.1",
        "spec": ">=1.0.1 <2.0.0",
        "type": "range"
      },
      "/var/www/pratos/node_modules/serialport"
    ]
  ],
  "_from": "promirepl@>=1.0.1 <2.0.0",
  "_id": "promirepl@1.0.1",
  "_inCache": true,
  "_location": "/promirepl",
  "_npmUser": {
    "name": "leedm777",
    "email": "leedm777@yahoo.com"
  },
  "_npmVersion": "2.0.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "promirepl@^1.0.1",
    "scope": null,
    "escapedName": "promirepl",
    "name": "promirepl",
    "rawSpec": "^1.0.1",
    "spec": ">=1.0.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/serialport"
  ],
  "_resolved": "https://registry.npmjs.org/promirepl/-/promirepl-1.0.1.tgz",
  "_shasum": "2951aaeba2bf3fe2274ff63a16d94c04ca60872e",
  "_shrinkwrap": null,
  "_spec": "promirepl@^1.0.1",
  "_where": "/var/www/pratos/node_modules/serialport",
  "author": {
    "name": "David M. Lee, II"
  },
  "bin": {
    "prominode": "./bin/prominode.js"
  },
  "bugs": {
    "url": "https://github.com/building5/node-promirepl/issues"
  },
  "dependencies": {},
  "description": "Promise infused REPL",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "2951aaeba2bf3fe2274ff63a16d94c04ca60872e",
    "tarball": "https://registry.npmjs.org/promirepl/-/promirepl-1.0.1.tgz"
  },
  "gitHead": "8d9e8e918cd2ee055ab20a354f2a36804a3ca52b",
  "homepage": "https://github.com/building5/node-promirepl#readme",
  "keywords": [
    "repl",
    "promises"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "leedm777",
      "email": "leedm777@yahoo.com"
    }
  ],
  "name": "promirepl",
  "optionalDependencies": {},
  "readme": "# promirepl\n\nA promise infused REPL.\n\nPromirepl provides a Node.js REPL which will automagically unwrap [promise][]\nvalues. It also is Node module, with a function that can add these magical\npromise inspecting capabilities to your own custom REPLs.\n\nThis allows you to use promise based APIs from the REPL just as easily as old\nfashioned synchronous APIs, without a lot of messing around with callbacks and\n`console.log` to get at asynchronous values from the REPL.\n\n## Usage\n\nPromirepl can be installed with `npm install -g promirepl`. This installs the\n`prominode` executable, which starts a Node.js REPL that has magical promise\nunwraping capabilities.\n\nWhenever a value evaluates to a promise (well, technically a [thenable][]),\npromirepl will wait for the promise to resolve. If the promise is fulfilled,\nit will evaluate to the promise's value. If the promise is rejected, it will\nwork as a thrown error.\n\nIf you want to stop waiting on a promise, just hit escape.\n\nIf you would like to disable the promirepl magic, just use the `.promise`\ncommand to toggle promise unwrapping.\n\n    $ npm install -g promirepl\n    $ prominode\n    > var Promise = require('es6-promise').Promise\n\nWhenever a value evaluates to a promise (well, technically a [thenable][]),\npromirepl will wait for the promise to resolve. If the promise is fulfilled,\nit will evaluate to the promise's value.\n\n    > Promise.resolve('hello')\n    'hello'\n\n    > new Promise(function (resolve) {\n    ... setTimeout(function () { resolve('some time later'); }, 3000);\n    ... })\n    { promise: 'some time later' }\n\nIf the promise is rejected, it will evaluate as a thrown error.\n\n    > Promise.reject(new Error('boom'))\n    Promise rejected: Error: boom\n        at repl:1:16\n        at REPLServer.defaultEval (repl.js:135:27)\n\nIf you would like to stop waiting on a promise, hit escape.\n\n    > new Promise(function () {})\n    Hit escape to stop waiting on promise\n    break.\n\nIf you would like to disable promise unwrapping, enter the `.promise` command.\n\n    > .promise\n    Promise auto-eval disabled\n\n    > Promise.resolve('hello')\n    {}\n\n    > Promise.reject(new Error('boom'))\n    {}\n\n## Programmatic Usage\n\nIf you would like to use promirepl within your own custom REPL, just use the\nexported `promirepl` function.\n\n    var customRepl = createCustomRepl();\n    require('promirepl').promirepl(customRepl.start({}));\n\n [promise]: https://promisesaplus.com/\n [thenable]: https://promisesaplus.com/#point-7\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/building5/node-promirepl.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.0.1"
}
