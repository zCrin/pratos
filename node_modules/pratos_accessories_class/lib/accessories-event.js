/*
* License MIT
* « Copyright © 2018, Pratos »
* v 1.3.0
* !!! In this update Homebridge accessories are no longer designated by their AID but by their name. Changing accessory name in Homebridge config.json might lose your datas.
*/
var cmd=require('node-cmd');
var fs = require('fs');
var list_accessories = require("../lib/accessories-list.js");

var lastState = '';
var lastEventChanged = 0;
var watchFile;
var intervalObject = 0;
const path = __dirname.replace('/node_modules/pratos_accessories_class/lib', '');
var regexEventsToIgnore = /Initializing|Getting|ECONNREFUSED|Requesting|HTTP bad response|HTTP get power function failed|HTTP set power function failed/i;

module.exports=detect_change;

function detect_change(globalVariable,callback){
	
	cmd.get('sudo chmod -R 777 /var/www/pratos/log/  && sudo echo -n > /var/www/pratos/log/homebridge.log && sudo echo -n > /var/www/pratos/log/homebridge.err && sudo chmod -R 777  /var/www/pratos/log/',function(out){
		var u = setInterval(function(){
			cmd.get('sudo chmod -R 777 /var/www/pratos/log/  && sudo echo -n > /var/www/pratos/log/homebridge.log && sudo echo -n > /var/www/pratos/log/homebridge.err && sudo chmod -R 777  /var/www/pratos/log/');
		},86400000);
		if(watchFile){
			watchFile.close();
		}
list_accessories(globalVariable, function(data){
lastState = data;
		watchFile =	fs.watch(path+'/log/homebridge.log', function(data) {
			if(data =='change'){
				cmd.get("tail -n 1 /var/www/pratos/log/homebridge.log",function (res) {
					if(res){
						var resArray = res.split(']');
						if(resArray[2] && !regexEventsToIgnore.test(resArray[2]) && resArray[2].trim() != ""){
							lastEventChanged = Date.now();
							list_accessories(globalVariable, function(data){
								emitChange(data,globalVariable);
								intervalObject = setInterval(function(){checkChangeAgain(globalVariable);},10000);
							});
						}
					}
					else{
						console.log("errl63accessories");
					}
				});
			}
		});
	});
callback();
});
}
	function checkChangeAgain(globalVariable){
		if(Date.now() - lastEventChanged > 6000){
			lastEventChanged = Date.now();
			list_accessories(globalVariable, function(data){
			emitChange(data,globalVariable);
			});
		}
		return true;
	}
	function emitChange(data,globalVariable){
		if(data != lastState){
			
			globalVariable.event.emit("accessories", "change:detected",data);
			 findSpecificChange(data,globalVariable,function(){lastState= data;});
			if(intervalObject != 0){
				clearInterval(intervalObject);
			}
		}
		return true;
	}
	function findSpecificChange(data,globalVariable,callback){

		var all_infos = JSON.parse(data).accessories;
		Lastall_infos = JSON.parse(lastState).accessories;
		if(all_infos){
		var f = all_infos.length,
		states=['des','act'];
		for(var z=0; z<f; z++){
			val = all_infos[z];

			if(!Lastall_infos[z] || val.state != Lastall_infos[z].state){

				globalVariable.event.emit(val.oldName+states[val.state],val);
			}
		}
		}else{
			console.log("error L82 accessory-event");
		}

		return callback();
	}
