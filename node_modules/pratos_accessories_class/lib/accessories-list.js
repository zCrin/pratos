/*
* License MIT
* « Copyright © 2018, Pratos »
* v 1.3.0
* !!! In this update Homebridge accessories are no longer designated by their AID but by their name. Changing accessory name in Homebridge config.json might lose your datas.
*/

module.exports=list_accessories;
var fs = require('fs');
const path = __dirname.replace('/node_modules/pratos_accessories_class/lib', '');
var cmd=require('node-cmd');
const request = require('request');

function list_accessories(globalVariable, callback,specificName){
	fs.readFile(path + "/conf/auto_accessories_icon.json", 'utf8', function(err, data){
			listIcons = JSON.parse(data); 
		});
	globalVariable.event.emit("accessories", "list:fetching");
		fs.readFile(path + "/conf/settings.json", 'utf8', function(err, data){
			var settings = JSON.parse(data);
			cmd.get("curl -X PUT "+ settings.homebridge.host + ":"+ settings.homebridge.port + "/accessories --header \"Content-Type:application/json\" --header 'authorization: \""+ settings.homebridge.pin + "\"' -s", function(out){
				if(out && isJson(out) ){
				globalVariable.database.mongoDB.collection("accessories_updated").findOne({'id': 'accessories'},function(err,data){
						if(data && data.id){
delete data.id;
updated_accessories = data.accessories;


						out = JSON.parse(out).accessories;

						
						var answer = '{ "accessories" : [';
						

						for(var i = 0; i < out.length; i++){
							var accessories = out[i];
var aid = (accessories.aid)? accessories.aid : 'error';

							
							var services = accessories.services,
								category = (services[1]['type'])? services[1]['type'] : 'error',
								name = manufacturer = model = iid = state = state_format = oldName= '';
							for(var o = 0; o < services.length; o++){
								var services2  = services[o].characteristics;
								for(var a = 0; a < services2.length; a++){
									var characteristics  = services2[a];
									switch(characteristics.description){
										case 'Name' :
											name = characteristics.value;
											oldName = name;
										break;
										case 'Manufacturer' :
											manufacturer = characteristics.value;
										break;
										case 'Model' :
											model = characteristics.value;
										break;
										case 'On' :
											iid = characteristics.iid;
											state_format = characteristics.format;
											state = characteristics.value;
										break;
										case 'Current Temperature' :
											state = characteristics['value'];
											iid = characteristics['iid'];
											state_format = characteristics['format'];
										break;
										case 'Motion Detected' :
											state = characteristics['value'];
											iid = characteristics['iid'];
											state_format = characteristics['format'];
										break;
										case 'Contact Sensor State' :
											state = characteristics['value'];
											iid = characteristics['iid'];
											state_format = characteristics['format'];
										break;
									}
								}
							}
							if(updated_accessories[oldName]){
								name = (updated_accessories[oldName].name)? updated_accessories[oldName].name : oldName;
								model = (updated_accessories[oldName].model)? updated_accessories[oldName].model : model;
								manufacturer = (updated_accessories[oldName].manufacturer) ? updated_accessories[oldName].manufacturer : manufacturer;
							}
							var category = accessory_category(category);
							var tempAnswer = `{
									"aid" : ` + aid + `,
									"iid" : "` + iid + `",
									"name" : "` + name + `",
									"oldName" : "` + oldName + `",
									"manufacturer" : "` + manufacturer + `",
									"model" : "` + model + `",
									"state_format" : "` + state_format + `",
									"category" : "` +  category + `",
									"state" : "false"`;
									
							if(updated_accessories[oldName] && updated_accessories[oldName].icon_on && updated_accessories[oldName].icon_off){
								tempAnswer += `, "icon_on" : "` + updated_accessories[oldName].icon_on + `",
												"icon_off" : "` + updated_accessories[oldName].icon_off + `"`;
							}
							if(updated_accessories[oldName] && updated_accessories[oldName].room){
tempAnswer += `, "room" : "` + updated_accessories[oldName].room + '"';
}

							tempAnswer += '},';
							answer += tempAnswer;
							if(specificName == oldName){
									
						var responseD = JSON.parse(tempAnswer.slice(0, -1) );
						responseD = {accessories:[responseD]};
									get_state_accessories(settings.homebridge, 1, 0, globalVariable, responseD, function(answerBack){
					return callback(JSON.stringify(answerBack));
					});
								
							}

						}
						if(!specificName){
						var responseD = JSON.parse(answer.slice(0, -1) +  ']}');
						
						get_state_accessories(settings.homebridge, responseD.accessories.length, 0, globalVariable, responseD, function(answerBack){
							
					return callback(JSON.stringify(answerBack));
					});
						}
if(!out){
						callback('couldn\t do the job 229 accessories');
}
						}
						else{
							
							callback('couldn\t do the job 233 accessories');
						}
						 
					});
				}
else{
globalVariable.restart_homebridge(function(){
	list_accessories(globalVariable, callback,specificName);
});
console.log("L140 accessory-list : restarting Homebridge wait 20 seconds")
}
			});
		});
	}
	
	function get_state_accessories(homebridge, nAccessories, z, globalVariable, data, callback){

if(z < nAccessories){
	
object_state(homebridge, z, globalVariable, data, function(data){

	if(data == "error"){
		return callback(data);
	}
get_state_accessories(homebridge, nAccessories, z+1, globalVariable, data,callback);
});
}
else{
return callback(data);
}
}


function accessory_category(category){
	
			var UUID = {'0000008C-0000-1000-8000-0026BB765291' : 'Window Covering', '0000008B-0000-1000-8000-0026BB765291' : 'Window', '0000004A-0000-1000-8000-0026BB765291' : 'Thermostat', '0000008A-0000-1000-8000-0026BB765291' : 'Temperature Sensor', '00000049-0000-1000-8000-0026BB765291' : 'Switch', '00000089-0000-1000-8000-0026BB765291' : 'Stateless Programmable Switch', '00000088-0000-1000-8000-0026BB765291' : 'Stateful Programmable Switch', '00000087-0000-1000-8000-0026BB765291' : 'Smoke Sensor', '0000007E-0000-1000-8000-0026BB765291' : 'Security System', '00000047-0000-1000-8000-0026BB765291' : 'Outlet', '00000086-0000-1000-8000-0026BB765291' : 'Occupancy Sensor', '00000085-0000-1000-8000-0026BB765291' : 'Motion Sensor', '00000045-0000-1000-8000-0026BB765291' : 'Lock Mechanism', '00000044-0000-1000-8000-0026BB765291' : 'Lock Management', '00000043-0000-1000-8000-0026BB765291' : 'Lightbulb', '00000084-0000-1000-8000-0026BB765291' : 'Light Sensor', '00000083-0000-1000-8000-0026BB765291' : 'Leak Sensor', '00000082-0000-1000-8000-0026BB765291' : 'Humidity Sensor', '00000041-0000-1000-8000-0026BB765291' : 'Garage Door Opener', '00000040-0000-1000-8000-0026BB765291' : 'Fan', '00000081-0000-1000-8000-0026BB765291' : 'Door', '00000080-0000-1000-8000-0026BB765291' : 'Contact Sensor', '0000007F-0000-1000-8000-0026BB765291' : 'Carbon Monoxide Sensor', '00000097-0000-1000-8000-0026BB765291' : 'Carbon Dioxide Sensor', '00000062-0000-1000-8000-0026BB765291' : 'Bridging State', '00000096-0000-1000-8000-0026BB765291' : 'Battery Service', '0000008D-0000-1000-8000-0026BB765291' : 'Air Quality Sensor', '0000003E-0000-1000-8000-0026BB765291' : 'Accessory Information',
'49FB9D4D-0FEA-4BF1-8FA6-E7B18AB86DCE' : 'Homebridge'};

		return UUID[category];
		}
		
		function object_state(homebridge, number, globalVariable, responseD, callback){
			
	request({uri: homebridge.host +":"+ homebridge.port +"/characteristics?id=" + responseD.accessories[number].aid + '.' + responseD.accessories[number].iid ,timeout:5000,headers:{'Content-Type':'application/json',authorization: homebridge.pin}},(err,res,state)=>{
		if(err){
			console.log("ex"+err);
		}
		if(state && isJson(state) ){
			state = JSON.parse(state);
			responseD.accessories[number].state = ((state.characteristics[0].value)? state.characteristics[0].value : 0).toString();
			responseD.accessories[number].state = (responseD.accessories[number].state == "true")? "1" : responseD.accessories[number].state;
			
			if(responseD.accessories[number].state.length == 0){
				responseD.accessories[number].state = 0;
			}
			var objectToTreat = responseD.accessories[number];
			if(objectToTreat.state_format.length != 0){
				if(listIcons[objectToTreat.state_format]){
					var img = listIcons[objectToTreat.state_format];
				}
				else{
					img = listIcons;
				}
			}
			else{
				img = listIcons;
			}
			var icon_on = '';
			var icon_off = '';
			if(objectToTreat.state_format == 'bool'){
				if(objectToTreat.icon_on){
					icon_on  = objectToTreat.icon_on;
				}
				else{
					icon_on = '/img/icons/' + img[objectToTreat.category + '1'];
				}
				if(objectToTreat.icon_off){
					icon_off = objectToTreat.icon_off;
				}
				else{
					icon_off = '/img/icons/' + img[objectToTreat.category + +'0'];
				}
			}
			else{
				if(img){
					icon_on = '/img/icons/' + img[objectToTreat.category + objectToTreat.state];
					icon_off = '/img/icons/' + img[objectToTreat.category + objectToTreat.state];
				}
			}
			if(objectToTreat.state_format != 'float'){
				responseD.accessories[number].icon_on = icon_on;
				responseD.accessories[number].icon_off = icon_off;
			}
			if(objectToTreat.category == "Temperature Sensor"){
				responseD.accessories[number].state = Math.round(objectToTreat.state) + " \260C";
			}
			return callback(responseD);
		}
		else{
			return callback("error");
		}
	});
}
function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}

	