const path = __dirname.replace('/node_modules/pratos_accessories_class', '');
var fs = require('fs');
var cmd=require('node-cmd');
var finalResponse;
module.exports = {		
	list_accessories: function(globalVariable){
		globalVariable.event.emit("accessories", "list:fetching");
		fs.readFile(path + "/conf/settings.json", 'utf8', function(err, data){
			var settings = JSON.parse(data);
			cmd.get("curl -X PUT "+ settings.homebridge.host + ":"+ settings.homebridge.port + "/accessories --header \"Content-Type:application/json\" --header 'authorization: \""+ settings.homebridge.pin + "\"' -s", function(out){
  				if(out){
					fs.readFile(path + "/conf/auto_updated_accessories.json", 'utf8', function(err, data){
						out = JSON.parse(out).accessories;
						var updated_accessories = JSON.parse(data).accessories;
						var answer = '{ "accessories" : [';
						for(var i = 0; i < out.length; i++){
							var accessories = out[i];
							var aid = (accessories.aid)? accessories.aid : 'error';
							var services = accessories.services,
								category = (services[1]['type'])? services[1]['type'] : 'error',
								name = manufacturer = model = iid = state = state_format = '';
							for(var o = 0; o < services.length; o++){
								var services2  = services[o].characteristics;
								for(var a = 0; a < services2.length; a++){
									var characteristics  = services2[a];
									switch(characteristics.description){
										case 'Name' :
											name = characteristics.value;
										break;
										case 'Manufacturer' :
											manufacturer = characteristics.value;
										break;
										case 'Model' :
											model = characteristics.value;
										break;
										case 'On' :
											iid = characteristics.iid;
											state_format = characteristics.format;
											state = characteristics.value;
										break;
										case 'Current Temperature' :
											state = characteristics['value'];
											iid = characteristics['iid'];
											state_format = characteristics['format'];
										break;
										case 'Motion Detected' :
											state = characteristics['value'];
											iid = characteristics['iid'];
											state_format = characteristics['format'];
										break;
									}
								}
							}
							if(updated_accessories[aid]){
								name = (updated_accessories[aid].name)? updated_accessories[aid].name : name;
								model = (updated_accessories[aid].model)? updated_accessories[aid].model : model;
								manufacturer = (updated_accessories[aid].manufacturer) ? updated_accessories[aid].manufacturer : manufacturer;
							}
							answer += `{
									"aid" : ` + aid + `,
									"iid" : "` + iid + `",
									"name" : "` + name + `",
									"manufacturer" : "` + manufacturer + `",
									"model" : "` + model + `",
									"state_format" : "` + state_format + `",
									"category" : "` +  accessory_category(category) + `",
									"state" : "false"`;
							if(updated_accessories[aid] && updated_accessories[aid].icon_on && updated_accessories[aid].icon_off){
								answer += `, "icon_on" : "` + updated_accessories[aid].icon_on + `",
												"icon_off" : "` + updated_accessories[aid].icon_off + `"`;
							}
							answer += '},';
						}
						finalResponse = JSON.parse(answer.slice(0, -1) +  ']}');
						for(var z = 0; z < finalResponse.accessories.length; z++){
							object_state(settings.homebridge, z, globalVariable);
						}
						return true;
					});
				}
			});
		});
	},
	change_state: function(user_id,globalVariable, callback){
		globalVariable.event.emit("accessories", "state:changing",{aid, iid,value});
		var aid = globalVariable[user_id].request.query.aid,
			iid = globalVariable[user_id].request.query.iid,
			value = globalVariable[user_id].request.query.value;
			fs.readFile(path + "/conf/settings.json", 'utf8', function(err, data){
				var homebridge = JSON.parse(data).homebridge;
				var command = 'curl -X PUT '+ homebridge.host +':'+ homebridge.port + '/characteristics --header "Content-Type:Application/json" --header "authorization:'+ homebridge.pin +'" --data "{\\\"characteristics\\\":[{\\\"aid\\\":' + aid + ',\\\"iid\\\":'+ iid + ',\\\"value\\\":'+ value +'}]}"';
				cmd.get(command, function(answer){
					globalVariable.event.emit("accessories", "state:changed",JSON.stringify(answer));
					return callback(answer);
				});
			});
		},
	update_accessory : function(user_id,globalVariable, callback){
		if(globalVariable[user_id].request.body.aid){
			var aid = globalVariable[user_id].request.body.aid;
			globalVariable.event.emit("accessories", "editing:starting");
			fs.readFile(path + "/conf/auto_updated_accessories.json", 'utf8', function(err, data){
				var updated_accessories = JSON.parse(data);
				if(!updated_accessories.accessories[aid]){
					updated_accessories.accessories[aid] = new Object();
				}
				if(globalVariable[user_id].request.body.name){
					updated_accessories.accessories[aid].name = globalVariable[user_id].request.body.name;
				}
				if(globalVariable[user_id].request.body.manufacturer){
					updated_accessories.accessories[aid].manufacturer = globalVariable[user_id].request.body.manufacturer;
				}
				if(globalVariable[user_id].request.body.model){
					updated_accessories.accessories[aid].model = globalVariable[user_id].request.body.model;
				}
				if(globalVariable[user_id].request.body.icon_on){
					updated_accessories.accessories[aid].icon_on = globalVariable[user_id].request.body.icon_on;
				}
				if(globalVariable[user_id].request.body.icon_off){
					updated_accessories.accessories[aid].icon_off = globalVariable[user_id].request.body.icon_off;
				}
				fs.writeFile(path + "/conf/auto_updated_accessories.json", JSON.stringify(updated_accessories));
				globalVariable.event.emit("accessories", "editing:successed");
				return callback("editing:successed");
			});
		}
		else{
			globalVariable.event.emit("accessories", "editing:failed");
			return callback("editing:failed");
		}
	}
};
function accessory_category(category){
			var UUID = {'0000008C-0000-1000-8000-0026BB765291' : 'Window Covering', '0000008B-0000-1000-8000-0026BB765291' : 'Window', '0000004A-0000-1000-8000-0026BB765291' : 'Thermostat', '0000008A-0000-1000-8000-0026BB765291' : 'Temperature Sensor', '00000049-0000-1000-8000-0026BB765291' : 'Switch', '00000089-0000-1000-8000-0026BB765291' : 'Stateless Programmable Switch', '00000088-0000-1000-8000-0026BB765291' : 'Stateful Programmable Switch', '00000087-0000-1000-8000-0026BB765291' : 'Smoke Sensor', '0000007E-0000-1000-8000-0026BB765291' : 'Security System', '00000047-0000-1000-8000-0026BB765291' : 'Outlet', '00000086-0000-1000-8000-0026BB765291' : 'Occupancy Sensor', '00000085-0000-1000-8000-0026BB765291' : 'Motion Sensor', '00000045-0000-1000-8000-0026BB765291' : 'Lock Mechanism', '00000044-0000-1000-8000-0026BB765291' : 'Lock Management', '00000043-0000-1000-8000-0026BB765291' : 'Lightbulb', '00000084-0000-1000-8000-0026BB765291' : 'Light Sensor', '00000083-0000-1000-8000-0026BB765291' : 'Leak Sensor', '00000082-0000-1000-8000-0026BB765291' : 'Humidity Sensor', '00000041-0000-1000-8000-0026BB765291' : 'Garage Door Opener', '00000040-0000-1000-8000-0026BB765291' : 'Fan', '00000081-0000-1000-8000-0026BB765291' : 'Door', '00000080-0000-1000-8000-0026BB765291' : 'Contact Sensor', '0000007F-0000-1000-8000-0026BB765291' : 'Carbon Monoxide Sensor', '00000097-0000-1000-8000-0026BB765291' : 'Carbon Dioxide Sensor', '00000062-0000-1000-8000-0026BB765291' : 'Bridging State', '00000096-0000-1000-8000-0026BB765291' : 'Battery Service', '0000008D-0000-1000-8000-0026BB765291' : 'Air Quality Sensor', '0000003E-0000-1000-8000-0026BB765291' : 'Accessory Information',
'49FB9D4D-0FEA-4BF1-8FA6-E7B18AB86DCE' : 'Homebridge'};

		return UUID[category];
		}
function object_state(homebridge, number, globalVariable){
	cmd.get("curl -X GET "+ homebridge.host +":"+ homebridge.port +"/characteristics?id=" + finalResponse.accessories[number].aid + '.' + finalResponse.accessories[number].iid + " --header \"Content-Type:application/json\" --header 'authorization: \""+ homebridge.pin +"\"'", function(state){
		state = JSON.parse(state);
		finalResponse.accessories[number].state = ((state.characteristics[0].value)? state.characteristics[0].value : 0).toString();
		finalResponse.accessories[number].state = (finalResponse.accessories[number].state == "true")? "1" : finalResponse.accessories[number].state;
		if(number == (finalResponse.accessories.length - 1)){
			has_been_fetched(homebridge, globalVariable);
		}
	});
}
function has_been_fetched(homebridge, globalVariable ){
	var follow = true;
	var length = finalResponse.accessories.length;
	for(var b = 0; b < length; b++){
		if(finalResponse.accessories[b].state == "false"){
			object_state2(homebridge, b, globalVariable);
			return false;
		}
	}
	if(follow == true){
		globalVariable.event.emit("accessories", "list:obtained",JSON.stringify(finalResponse));
	}
	return true;
}
function object_state2(homebridge, number, globalVariable){
	setTimeout(function(){
		cmd.get("curl -X GET "+ homebridge.host +":"+ homebridge.port +"/characteristics?id=" + finalResponse.accessories[number].aid + '.' + finalResponse.accessories[number].iid + " --header \"Content-Type:application/json\" --header 'authorization: \""+ homebridge.pin +"\"'", function(state){
			state = JSON.parse(state);
			finalResponse.accessories[number].state = ((state.characteristics[0].value)? state.characteristics[0].value : 0).toString();
			finalResponse.accessories[number].state = (finalResponse.accessories[number].state == "true")? "1" : finalResponse.accessories[number].state;
			has_been_fetched(homebridge, globalVariable);
		});
	}, 2000);
}