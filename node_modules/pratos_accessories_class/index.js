const path = __dirname.replace('/node_modules/pratos_accessories_class', '');
var fs = require('fs');
var cmd=require('node-cmd');
var lastState = '';
var finalResponse;
var listIcons;
var ObjectID = require('mongodb').ObjectID;
const request = require('request');
var MongoClient =require('mongodb').MongoClient;
var mongoDB;

		MongoClient.connect("mongodb://localhost/pratos", function(error, db) {
    if (error) throw error;
if(!error){
mongoDB = db;
}

});
var lastEventChanged = 0;
var watchFile;
module.exports = {
	has_change_happened: function(globalVariable){
var intervalObject = 0;

		cmd.get(
			'sudo chmod -R 777 /var/www/pratos/log/  && sudo echo -n > /var/www/pratos/log/homebridge.log && sudo echo -n > /var/www/pratos/log/homebridge.err && sudo chmod -R 777  /var/www/pratos/log/',
			function(out){
				var u = setInterval(
					function(){
						cmd.get('sudo chmod -R 777 /var/www/pratos/log/  && sudo echo -n > /var/www/pratos/log/homebridge.log && sudo echo -n > /var/www/pratos/log/homebridge.err && sudo chmod -R 777  /var/www/pratos/log/');
					}, 
					86400000
				);
				//var lastLine = require('last-line');
				if(watchFile){
watchFile.close();

}
			watchFile=	fs.watch('/var/www/pratos/log/homebridge.log', 
					function(data) {
						if(data =='change'){
							//lastLine('/var/www/pratos/log/homebridge.log', 
cmd.get("tail -n 1 /var/www/pratos/log/homebridge.log",
								function (res) {
									if(res){
										var resArray = res.split(']');
										if(resArray[2] && !/Initializing|Getting|Requesting|HTTP get power function failed|HTTP set power function failed/i.test(resArray[2]) && resArray[2].trim() != ""){
											console.log(res);
											lastEventChanged = Date.now();
											module.exports.list_accessories(globalVariable, function(data){
												if(data != lastState){
				
					lastState= data;
					globalVariable.event.emit("accessories", "change:detected",data);
if(intervalObject != 0){
					clearInterval(intervalObject);
}
					intervalObject = setInterval(checkChangeAgain,10000);
				}
				
											});
										}
									}
									else{
											console.log("errl63accessories");
									}
								}
							);
						}
					}
				);
			}
		);
		
		function checkChangeAgain(){
			if(Date.now() - lastEventChanged > 6000){
				lastEventChanged = Date.now();
				module.exports.list_accessories(globalVariable, function(data){
					if(data != lastState){
						if(intervalObject != 0){ clearInterval(intervalObject);
}
					lastState= data;
					globalVariable.event.emit("accessories", "change:detected",data);
					}	
				});
			}
		}
	},
list_rooms:function(globalVariable){
mongoDB.collection("rooms_list"). find({}).toArray(function(err, result) {

if(err){
globalVariable.event.emit("accessories","listRooms:obtained",err);
}else{
globalVariable.event.emit("accessories","listRooms:obtained",JSON.stringify(result));
}
});

},
add_rooms:function(user_id, globalVariable,callback){
	if(globalVariable[user_id].request.query.name){
		mongoDB.collection("rooms_list").update({ name:globalVariable[user_id].request.query.name},{ name:globalVariable[user_id].request.query.name},{upsert:true},function(){ });
		return callback('updated');
	}
	else{
		return callback('error');
	}
	
},
update_rooms:function(user_id, globalVariable,callback){
	if(globalVariable[user_id].request.query.name && globalVariable[user_id].request.query.id){
		mongoDB.collection("rooms_list").update({_id: new ObjectID(globalVariable[user_id].request.query.id)},{ name:globalVariable[user_id].request.query.name},{upsert:true},function(){ return callback('updated');});
		
	}
	else{
		return callback('error');
	}
	
},
delete_rooms:function(user_id, globalVariable,callback){
	if(globalVariable[user_id].request.query.id){
		
		mongoDB.collection("rooms_list").deleteOne({_id: new ObjectID(globalVariable[user_id].request.query.id)},  function(err, obj) {
  
   
    
  });
		return callback('updated');
	}
	else{
		return callback('error');
	}
	
},
	list_accessories: function(globalVariable, callback){
		
		fs.readFile(path + "/conf/auto_accessories_icon.json", 'utf8', function(err, data){
listIcons = JSON.parse(data); 
});
		globalVariable.event.emit("accessories", "list:fetching");
		fs.readFile(path + "/conf/settings.json", 'utf8', function(err, data){
			var settings = JSON.parse(data);
			cmd.get("curl -X PUT "+ settings.homebridge.host + ":"+ settings.homebridge.port + "/accessories --header \"Content-Type:application/json\" --header 'authorization: \""+ settings.homebridge.pin + "\"' -s", function(out){

  				if(out && isJson(out) ){
					mongoDB.collection("accessories_updated").findOne({'id': 'accessories'},function(err,data){
						if(data && data.id){
delete data.id;
updated_accessories = data.accessories;


						out = JSON.parse(out).accessories;
						
						var answer = '{ "accessories" : [';
						for(var i = 0; i < out.length; i++){
							var accessories = out[i];
							var aid = (accessories.aid)? accessories.aid : 'error';
							var services = accessories.services,
								category = (services[1]['type'])? services[1]['type'] : 'error',
								name = manufacturer = model = iid = state = state_format = '';
							for(var o = 0; o < services.length; o++){
								var services2  = services[o].characteristics;
								for(var a = 0; a < services2.length; a++){
									var characteristics  = services2[a];
									switch(characteristics.description){
										case 'Name' :
											name = characteristics.value;
										break;
										case 'Manufacturer' :
											manufacturer = characteristics.value;
										break;
										case 'Model' :
											model = characteristics.value;
										break;
										case 'On' :
											iid = characteristics.iid;
											state_format = characteristics.format;
											state = characteristics.value;
										break;
										case 'Current Temperature' :
											state = characteristics['value'];
											iid = characteristics['iid'];
											state_format = characteristics['format'];
										break;
										case 'Motion Detected' :
											state = characteristics['value'];
											iid = characteristics['iid'];
											state_format = characteristics['format'];
										break;
									}
								}
							}
							if(updated_accessories[aid]){
								name = (updated_accessories[aid].name)? updated_accessories[aid].name : name;
								model = (updated_accessories[aid].model)? updated_accessories[aid].model : model;
								manufacturer = (updated_accessories[aid].manufacturer) ? updated_accessories[aid].manufacturer : manufacturer;
							}
							var category = accessory_category(category);
							answer += `{
									"aid" : ` + aid + `,
									"iid" : "` + iid + `",
									"name" : "` + name + `",
									"manufacturer" : "` + manufacturer + `",
									"model" : "` + model + `",
									"state_format" : "` + state_format + `",
									"category" : "` +  category + `",
									"state" : "false"`;
							if(updated_accessories[aid] && updated_accessories[aid].icon_on && updated_accessories[aid].icon_off){
								answer += `, "icon_on" : "` + updated_accessories[aid].icon_on + `",
												"icon_off" : "` + updated_accessories[aid].icon_off + `"`;
							}
							if(updated_accessories[aid] && updated_accessories[aid].room){
answer += `, "room" : "` + updated_accessories[aid].room + '"';
}
							answer += '},';
						}
						var responseD = JSON.parse(answer.slice(0, -1) +  ']}');
						
						get_state_accessories(settings.homebridge, responseD.accessories.length, 0, globalVariable, responseD, function(answerBack){
					return callback(JSON.stringify(answerBack));
					});

						return "error";
						}
						else{
							
							return "error";
						}
						 
					});
				}
else{

return "error";
}
			});
		});
	},
	change_state: function(user_id,globalVariable, callback){
		globalVariable.event.emit("accessories", "state:changing",{aid, iid,value});
		var aid = globalVariable[user_id].request.query.aid,
			iid = globalVariable[user_id].request.query.iid,
			value = globalVariable[user_id].request.query.value;
			fs.readFile(path + "/conf/settings.json", 'utf8', function(err, data){
				var homebridge = JSON.parse(data).homebridge;
				var command = 'curl -X PUT '+ homebridge.host +':'+ homebridge.port + '/characteristics --header "Content-Type:Application/json" --header "authorization:'+ homebridge.pin +'" --data "{\\\"characteristics\\\":[{\\\"aid\\\":' + aid + ',\\\"iid\\\":'+ iid + ',\\\"value\\\":'+ value +'}]}"';
				cmd.get(command, function(answer){
					globalVariable.event.emit("accessories", "state:changed",JSON.stringify(answer));
					return callback(answer);
				});
			});
		},
	update_accessory : function(user_id,globalVariable, callback){
		if(globalVariable[user_id].request.body.aid){
			var aid = globalVariable[user_id].request.body.aid;
			globalVariable.event.emit("accessories", "editing:starting");
			mongoDB.collection("accessories_updated").findOne({'id': 'accessories'},function(err, updated_accessories){
console.log(updated_accessories);
delete updated_accessories.id;


				if(!updated_accessories.accessories[aid]){
					updated_accessories.accessories[aid] = new Object();
				}
				if(globalVariable[user_id].request.body.name){
					updated_accessories.accessories[aid].name = globalVariable[user_id].request.body.name;
				}
if(globalVariable[user_id].request.body.room){
					updated_accessories.accessories[aid].room = globalVariable[user_id].request.body.room;
				}
				if(globalVariable[user_id].request.body.manufacturer){
					updated_accessories.accessories[aid].manufacturer = globalVariable[user_id].request.body.manufacturer;
				}
				if(globalVariable[user_id].request.body.model){
					updated_accessories.accessories[aid].model = globalVariable[user_id].request.body.model;
				}
				if(globalVariable[user_id].request.body.icon_on){
					updated_accessories.accessories[aid].icon_on = globalVariable[user_id].request.body.icon_on;
				}
				if(globalVariable[user_id].request.body.icon_off){
					updated_accessories.accessories[aid].icon_off = globalVariable[user_id].request.body.icon_off;
				}
updated_accessories.id ='accessories';
mongoDB.collection("accessories_updated").update({ id:"accessories"}, 
updated_accessories,{upsert:true});

				fs.writeFile(path + "/conf/auto_updated_accessories.json", JSON.stringify(updated_accessories));
				globalVariable.event.emit("accessories", "editing:successed");
				return callback("editing:successed");
				 
			});
		}
		else{
			globalVariable.event.emit("accessories", "editing:failed");
			return callback("editing:failed");
		}
	}
};
function get_state_accessories(homebridge, nAccessories, z, globalVariable, data, callback){

if(z < nAccessories){
object_state(homebridge, z, globalVariable, data, function(data){

	if(data == "error"){
		return callback(data);
	}
callbackState(homebridge, nAccessories, z+1, globalVariable, data,callback);
});
}
else{
return callback(data);
}
}
function callbackState(homebridge, nAccessories, z, globalVariable,data,callback){

if(z < nAccessories){
object_state(homebridge, z, globalVariable, data, function(data){
	if(data == "error"){
		return callback(data);
	}
	
get_state_accessories(homebridge, nAccessories, z+1, globalVariable, data,callback);
});
}
else{
return callback(data);
}
}
function accessory_category(category){
			var UUID = {'0000008C-0000-1000-8000-0026BB765291' : 'Window Covering', '0000008B-0000-1000-8000-0026BB765291' : 'Window', '0000004A-0000-1000-8000-0026BB765291' : 'Thermostat', '0000008A-0000-1000-8000-0026BB765291' : 'Temperature Sensor', '00000049-0000-1000-8000-0026BB765291' : 'Switch', '00000089-0000-1000-8000-0026BB765291' : 'Stateless Programmable Switch', '00000088-0000-1000-8000-0026BB765291' : 'Stateful Programmable Switch', '00000087-0000-1000-8000-0026BB765291' : 'Smoke Sensor', '0000007E-0000-1000-8000-0026BB765291' : 'Security System', '00000047-0000-1000-8000-0026BB765291' : 'Outlet', '00000086-0000-1000-8000-0026BB765291' : 'Occupancy Sensor', '00000085-0000-1000-8000-0026BB765291' : 'Motion Sensor', '00000045-0000-1000-8000-0026BB765291' : 'Lock Mechanism', '00000044-0000-1000-8000-0026BB765291' : 'Lock Management', '00000043-0000-1000-8000-0026BB765291' : 'Lightbulb', '00000084-0000-1000-8000-0026BB765291' : 'Light Sensor', '00000083-0000-1000-8000-0026BB765291' : 'Leak Sensor', '00000082-0000-1000-8000-0026BB765291' : 'Humidity Sensor', '00000041-0000-1000-8000-0026BB765291' : 'Garage Door Opener', '00000040-0000-1000-8000-0026BB765291' : 'Fan', '00000081-0000-1000-8000-0026BB765291' : 'Door', '00000080-0000-1000-8000-0026BB765291' : 'Contact Sensor', '0000007F-0000-1000-8000-0026BB765291' : 'Carbon Monoxide Sensor', '00000097-0000-1000-8000-0026BB765291' : 'Carbon Dioxide Sensor', '00000062-0000-1000-8000-0026BB765291' : 'Bridging State', '00000096-0000-1000-8000-0026BB765291' : 'Battery Service', '0000008D-0000-1000-8000-0026BB765291' : 'Air Quality Sensor', '0000003E-0000-1000-8000-0026BB765291' : 'Accessory Information',
'49FB9D4D-0FEA-4BF1-8FA6-E7B18AB86DCE' : 'Homebridge'};

		return UUID[category];
		}
function object_state(homebridge, number, globalVariable, responseD, callback){


request({uri: homebridge.host +":"+ homebridge.port +"/characteristics?id=" + responseD.accessories[number].aid + '.' + responseD.accessories[number].iid ,timeout:5000,headers:{'Content-Type':'application/json',authorization: homebridge.pin}},(err,res,state)=>{
if(err){
console.log(err);
}
if(state && isJson(state) ){
		state = JSON.parse(state);
		responseD.accessories[number].state = ((state.characteristics[0].value)? state.characteristics[0].value : 0).toString();
		responseD.accessories[number].state = (responseD.accessories[number].state == "true")? "1" : responseD.accessories[number].state;
if(responseD.accessories[number].state.length == 0){
responseD.accessories[number].state = 0;
}
var objectToTreat = responseD.accessories[number];
if(objectToTreat.state_format.length != 0){
 if(listIcons[objectToTreat.state_format]){
img = listIcons[objectToTreat.state_format];
}
else{
img = listIcons;
}
					}
					else{
						img = listIcons;
					}
var icon_on = '';
var icon_off = '';
if(objectToTreat.state_format == 'bool'){
					
						if(objectToTreat.icon_on){
							 icon_on  = objectToTreat.icon_on;
						}
						else{
							icon_on = '/img/icons/' + img[objectToTreat.category + '1'];
						}
		
					
						if(objectToTreat.icon_off){
							icon_off = objectToTreat.icon_off;
						}
						else{
							icon_off = '/img/icons/' + img[objectToTreat.category + +'0'];
						}
					
				}
				else{
					if(img){
						icon_on = '/img/icons/' + img[objectToTreat.category + objectToTreat.state];
icon_off = '/img/icons/' + img[objectToTreat.category + objectToTreat.state];
					}
				}
if(objectToTreat.state_format != 'float'){
responseD.accessories[number].icon_on = icon_on;
responseD.accessories[number].icon_off = icon_off;
}
if(objectToTreat.category == "Temperature Sensor"){
						responseD.accessories[number].state = Math.round(objectToTreat.state) + " \260C";
					}
					
return callback(responseD);

} else{
return callback("error");
}
	});
}
function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}


			