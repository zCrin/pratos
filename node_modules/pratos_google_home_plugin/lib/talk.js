module.exports={saveVoice};
const request = require('request');
var fs = require('fs');
var cmd=require('node-cmd');
var http = require('http');
var send = require('send');
const path = __dirname.replace('/node_modules/pratos_google_home_plugin/lib', '');
var id = "say";
var d=0;
var directory = __dirname.replace("/lib","")+"/public/";
function sox(data,callback){

cmd.get("sox"+data+" "+ directory+"saytext.mp3 && rm -f "+ directory+"song/*  && sox -v 2.0 "+ directory+ id+"text.mp3 -r 48000 "+ directory+"sound.mp3 pitch -1100 speed 1.4 && sudo rm "+ directory+ id+"text.mp3",function(err,res){

fs.readFile(path+"/conf/settings.json", 'utf8', function(err,data){

data = JSON.parse(data);

var url = 'http://192.168.0.6:3009/sound.mp3';
callback(url);

});
});
}
function downloadFile(textList,nFiles,n,lang,command,callback){
if(n < nFiles){
if(textList[n].trim()==''){
downloadFile(textList,nFiles,n+1,lang, command ,callback);
}else{
request
  .get('http://translate.google.com/translate_tts?tl='+ lang+'&client=tw-ob&q='+encodeURI(textList[n])+'&ie=UTF-8')
  .on('error', function(err) {
    sox('err',callback);
  })
.on('response',function(){
command += ' '+ directory+"song/saytext"+n+".mp3 "+ directory+"silence2.mp3 ";
downloadFile(textList,nFiles,n+1,lang, command ,callback);
})
  .pipe(fs.createWriteStream(directory+"song/saytext"+n+".mp3"));
}
}
else{
return sox(command,callback);
}

}


function saveVoice(texto, lang="fr" ,callback){


text=texto.split('.');
var numberOfPhrase = text.length;

downloadFile(text, numberOfPhrase,0,lang,'',callback);
}

      var transcode = null;
var file = directory+"sound.mp3";
            // start the http server
cmd.get("sudo kill $(sudo lsof -t -i:3009)", function(){
            var server = http.createServer(function(request, response) {
                    send(request, file).pipe(response);
            }).listen(3009);

            server.on('request', function(request, response) {
                var start = 0, end = 0;
                var stat = fs.statSync(file);
                var range = request.headers['range'];
                if (range != null) {
                    start = parseInt(range.slice(range.indexOf('bytes=') + 6, range.indexOf('-')));
                    end = parseInt(range.slice(range.indexOf('-') + 1, range.length));
                }
                if (isNaN(end) || end == 0)
                    end = stat.size - 1;

                response.statusCode = 206;
                response.setHeader('Content-Range', 'bytes '
                                    + start
                                    + '-'
                                    + end
                                    + '/'
                                    + stat.size);
            });
});