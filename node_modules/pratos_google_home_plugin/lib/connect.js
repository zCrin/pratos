
  var Client = require('castv2-client').Client,
  DefaultMediaReceiver = require('castv2-client').DefaultMediaReceiver,
  mime = require('mime-types'),
talk = require('../lib/talk.js'),
x = require('../lib/search.js');

var client2;

var playerX;
function Connecter(ip) {
this.lang = 'fr'


      this.player; this.client;



this.ip = ip;

};

Connecter.prototype.readySpeaker = function(callback) {
      var client = new Client();
client2 = client;
      client.connect(this.ip, function(){
        client.launch(DefaultMediaReceiver, function(err, player){
playerX =player;
if(err){

callback(err,player);
}else{

callback(0,player);
}
});
      });
    }
Connecter.prototype.config = function(options = {}) {
      this.lang = options.lang || this.lang
    }
Connecter.prototype.playMethod =function(url,callback) {
var cT = mime.lookup(url) || 'audio/mp3';

     

      const params = {
        contentId: url,
        contentType: cT,
        streamType: 'BUFFERED'
      }




     return playerX.load(params, { autoplay: true }, function(err, status){
client2.close();
          if(err){
callback(err, status);
}else{
callback(0, status);
}
        });

    }
Connecter.prototype.playMedia=function(url,callback) {
      if(!url.startsWith('http')) throw new Error('This format is not supported.')
      this.playMethod(url,function(err,res){
callback(err,res);
});
    }
Connecter.prototype.speak=function(message, callback, timeout = 3000) {
     talk.saveVoice(message,this.lang,function(url){

      const params = {
        contentId: url,
        contentType: 'audio/mp3',
        streamType: 'BUFFERED'
      }

      return playerX.load(params, { autoplay: true }, function(err, status){
client2.close();
          if(err){
callback(err, status);
}else{
callback(0, status);
}});
        
});
    }
module.exports=Connecter;

