const path = __dirname.replace('/node_modules/pratos_google_home_plugin', '');
var fs = require('fs');
var Cookies = require("cookies");
const http = require('http');
var globalFunctions ={};
var globalVariableIn;
var Accessories = require("pratos_accessories_class");
var stringSimilarity = require('string-similarity');
var MongoClient = require("mongodb").MongoClient;
var mongoDB;
module.exports = {
	config:function(){
		var conf = Object();
		conf.GET = true;
		MongoClient.connect("mongodb://localhost/pratos", function(error, db) {
    if (error) throw error;
if(!error){
	console.log("Google Home : Connected to Pratos' databases.");
	
 mongoDB = db;
}
});
		return conf;
	},
	get:function(app, globalVariable){
		globalVariableIn = globalVariable;
		app.get('/google_home', function(req, res) {
if(globalVariable[req.user_id].request.query['text']){
globalVariable.event.emit("googleHome_plugin","command_received", globalVariable[req.user_id].request.query['text']);
/*
var googlehome = require('google-home-notifier');
 
googlehome.device('Chambre Antoine'); // Change to your Google Home name
googlehome.accent('fr'); // optional: 'us'= american voice (default), 'uk'= british voice
googlehome.notify('Bien re\347u !', function(res) {
  console.log(res);
});


http.get('http://192.168.0.18/lampSwitch', (resp) => {
  let data = '';
 

  resp.on('end', () => {
    console.log(JSON.parse(data).explanation);
  });
 
}).on("error", (err) => {
  console.log("Error: " + err.message);
});
*/
			res.setHeader('Content-Type', 'text/html');
			
fs.writeFile( __dirname + '/x', globalVariable[req.user_id].request.query['text']);

analyse_request(globalVariable[req.user_id].request. query['text']);
						res.end('done');
delete globalVariable[req.user_id];
}
						});


		}
};
function analyse_request(text){

var regexDe = /^d( )' |de |la |l( )'/;
text = text. trim().replace(regexDe,''). sansAccent();
mongoDB.collection("googleHome_action").findOne({'trigger': text}, function(error, data) {
if(data){
globalFunctions[data.functionToCall+'Registered'](data);
}
else{
var actions = {
"allumer" : "homebridge",
"eteindre" : "homebridge",
"dire" : "say"

};
if(actions[text.substr(0, text.indexOf(" ")).trim()]){
var functionName = actions[text.substr(0, text.indexOf(" ")).trim()];
if(globalFunctions [functionName]){
globalFunctions[functionName](text);
}
else{
console.log("Google Home : this function is registered but doesn't exists yet.");
}
}
else{
console.log("Google Home : command not understood");

}
}
});
}

globalFunctions.homebridge = function(text){

	
				Accessories.list_accessories(globalVariableIn,function(data){
					
						var firstWord = text.substr(0, text.indexOf(" ")).trim();data = JSON.parse(data);
if(firstWord == 'allumer'){
var regexDe = /^allumer l[e|a|( )']/;
var secondWorld = text.trim().replace(regexDe,'').trim();

var n = homebridgeLookWhat(secondWorld, data);

homebridgeChangeStateObject(data.accessories[n].aid, data.accessories[n].iid,1);
mongoDB.collection("googleHome_action").update({ trigger:text}, 
{ trigger:text, functionToCall:"homebridge",homebridgeAction:"turnOn",homebridgeObjectAid: data.accessories[n].aid, homebridgeObjectIid:data.accessories[n].iid},{upsert:true},function(err){

});

}
else if(firstWord == 'eteindre'){
var regexDe = /^eteindre l[e|a|( )']/;
var secondWorld = text.trim().replace(regexDe,'').trim();

var n = homebridgeLookWhat(secondWorld, data);

homebridgeChangeStateObject(data.accessories[n].aid, data.accessories[n].iid,0);
mongoDB.collection("googleHome_action").update({ trigger:text}, 
{ trigger:text, functionToCall:"homebridge",homebridgeAction:"turnOff",homebridgeObjectAid: data.accessories[n].aid, homebridgeObjectIid:data.accessories[n].iid},{upsert:true},function(err){


} );
}
					
});
};

function homebridgeLookWhat(phrase, data){
phrase = stripPolitesse(phrase);
var objectPossible = {
"Lightbulb" : "lumiere|lampe",
"Motion Sensor":"detecteur de mouvement|capteur de mouvement"
};
 var typeObj = in_object(phrase,objectPossible);
var nObj = has_object(typeObj, data);
if(nObj.length == 1){
return nObj[0];
}
else if(nObj.length <= 0){
var regexTo = new RegExp(objectPossible[typeObj],'i');
return findSimilarity(phrase.replace(regexTo,""),data, 0);
}
else{
var regexTo = new RegExp(objectPossible[typeObj],'i');
return findSimilarity(phrase.replace(regexTo,""),data, nObj);
}
}
function in_object(phrase,objectTo){

var n = Object.keys(objectTo);
	var l = n.length;
for(var i = 0; i < l; i++){

var u = new RegExp(objectTo[n[i]],'i');
if(u.test(phrase)){

return n[i];

}
}
return false;
}
function has_object(typeObj, data){
var x = data.accessories.length;
var where = [];
for(var y = 0; y<x; y++){
if(typeObj== data.accessories[y].category){
where.push(y);
}
}
return where;
}
String.prototype.sansAccent = function(){
    var accent = {
"a":"\345|\u0105|\u0101|\252|\341|\340|\344|\342|\343",
"e":"\u0117|\u0113|\u0119|\352|\351|\350|\353",
"y":"\377",
"u":"\u016b|\374|\373|\371|\372",
"i":"\u012b|\u012f|\354|\356|\357|\355",
"o":"\u014d|\365|\370|\272|\363|\366|\364|\362",
"c":"\u010d|\347|\u0107",
"n":"\361|\u0144",
"ae":"\346",
"oe":"\u0153"
    };
   var n = Object.keys(accent);
	var l = n.length;
     
    var str = this;
    for(var i = 0; i < l; i++){
var u = new RegExp(accent[n[i]],'g');
        str = str.replace(u, n[i]);
    }
    
    return str;
}
function findSimilarity(phrase,data, nObj){
if(nObj != 0){
var n = nObj.length;
var bestScore = 0;
var bestId = nObj[0];

if(phrase.length > 0){
for(var e =0; e<n;e++){

var similarity = stringSimilarity.compareTwoStrings(phrase, data. accessories[nObj[e]].name. sansAccent() ); 
if(similarity > bestScore){
bestScore= similarity;
bestId = nObj[e];
}
}
 }
return bestId;
}
else{
var x = data.accessories.length;
var bestScore = 0;
var bestId;
for(var y = 0; y<x; y++){

var similarity = stringSimilarity.compareTwoStrings(phrase, data. accessories[y].name. sansAccent()); 
if(similarity > bestScore){
bestScore= similarity;
bestId = y;

}

}
return bestId;
}
}
function stripPolitesse(phrase){
var politesse =/s( )'( )il te plait/;
return phrase.replace(politesse,"");
}
globalFunctions.homebridgeRegistered= function(data){
switch(data.homebridgeAction){
case 'turnOn' :
homebridgeChangeStateObject(data. homebridgeObjectAid, data.homebridgeObjectIid,1);
break;
case 'turnOff' :
homebridgeChangeStateObject(data. homebridgeObjectAid, data. homebridgeObjectIid,0);
break;
}

}
function homebridgeChangeStateObject(aid,iid,state){
globalVariableIn["tempGoogle"] = {
"request":{
"query":{
"iid" : iid,
"aid" : aid,
"value" : state
}
}
};
Accessories .change_state("tempGoogle", globalVariableIn,function(k){

delete globalVariableIn["tempGoogle"];
});
}