var fs = require("fs");
var Cookies = require("cookies");
const path = __dirname.replace('/node_modules/pratos_plugin_class', '');
var user = require(path+'/lib/users.js');
var jsonFormat = require("json-format");
var cmd = require('node-cmd');
var config = {
    type: 'tab',
    size: 1
}


module.exports = {
    list: function (globalvariable, app, callback) {
        globalvariable.pluginsSettings = Object();
        globalvariable.navbarPlugins = Object();
        globalvariable.homepagePlugins = Object();
        globalvariable.contentPlugins = Object();
		globalvariable.RecipeBlockList = {};
        globalvariable.socketPlugins = Array();
        fs.readFile(path + "/conf/settings.json", 'utf8', function (err, data) {

            var txt = JSON.parse(data);
            var pluginsName = txt.plugins;
            var numberOfPlugins = pluginsName.length;

            for (var i = 0; i < numberOfPlugins; i++) {
                var conf = require(pluginsName[i] + "_plugin").config();
                if (conf.navbar) {
                    globalvariable.navbarPlugins[pluginsName[i]] = pluginsName[i] + "_plugin";

                }
                if (conf.on_homepage) {
                    globalvariable.homepagePlugins[pluginsName[i]] = pluginsName[i] + "_plugin";
                }
                if (conf.SOCKET) {
                    globalvariable.socketPlugins.push(pluginsName[i] + "_plugin");
                }

                if (conf.GET) {
                    require(pluginsName[i] + "_plugin").get(app, globalvariable);
                }
                if (conf.POST) {
                    require(pluginsName[i] + "_plugin").post(app, globalvariable);
                }
                if (conf.on_content) {
                    globalvariable.contentPlugins = require(pluginsName[i] + "_plugin").content(globalvariable.contentPlugins);
                }
                if (conf.has_settings) {
                    globalvariable.pluginsSettings[pluginsName[i]] =
                        require(pluginsName[i] + "_plugin").has_settings(globalvariable);
                }
                if (conf.ALL) {
                    require(pluginsName[i] + "_plugin").ALL(app, globalvariable);
                }
                if (conf.EVENT) {
                    require(pluginsName[i] + "_plugin").event(globalvariable);
                }
				if (conf.RecipeBlock) {
                    globalvariable.RecipeBlockList[pluginsName[i]] = pluginsName[i] + "_plugin";
                }
            }

            return callback(globalvariable);
        });
    },
    webPages: function (app, globalVariable) {
        app.get('/list_plugins/', function (req, res) {

            user.is_connected(req.user_id, function (response,user_res) {
			if (response == true) {
                    res.setHeader('Content-Type', 'application/json');
                    list_plugins(function (data) {
                        res.end(data);
                        delete globalVariable[req.user_id];
                    });
                } else {
                    delete globalVariable[req.user_id];
                }
            });

        });
        app.post('/toggle_plugins/', function (req, res) {

            var pluginsList = globalVariable[req.user_id].request.bodyPratos.pluginsList;
            user.is_connected(req.user_id, function (response,user_res) {
			if (response == true) {
                    res.setHeader('Content-Type', 'text/html');

                    togglePlugins(pluginsList, function () {

                        res.end("reboot_allowed");
                        delete globalVariable[req.user_id];
                    });
                } else {

                    delete globalVariable[req.user_id];
                }

            });

        });
        app.post('/remove_plugins/', function (req, res) {
            if (globalVariable[req.user_id].request.bodyPratos.pluginsList) {
                user.is_connected(req.user_id, function (response,user_res) {
			if (response == true) {
                        var pluginsList = globalVariable[req.user_id].request.bodyPratos.pluginsList;
                        res.setHeader('Content-Type', 'text/html');
                        var text = '',
                        nPlugins = pluginsList.length;

                        list_plugins(function (settings) {
                            settings = JSON.parse(settings);

                            for (var u = 0; u < nPlugins; u++) {
                                settings.plugins[pluginsList[u]] = 0;
                                text += "npm remove " + pluginsList[u] + " && ";
                            }
                            text = "cd /var/www/pratos/ && " + text.slice(0, -4);
                            togglePlugins(settings, function () {
                                cmd.get(text, function () {
                                    delete globalVariable[req.user_id];
                                    res.end("reboot_allowed");
                                });
                            });
                        });
                    }
                });
            } else {
                res.end("reboot_not_allowed");
                delete globalVariable[req.user_id];
            }

        });
    }
};
function list_plugins(callback) {
    const testFolder = path + '/node_modules/';
    var res = '{"plugins":{';
    fs.readFile(path + "/conf/settings.json", 'utf8', function (err, data) {
        var txt = JSON.parse(data);
        var pluginsName = txt.plugins;

        fs.readdir(testFolder, (error, files) => {
            files.forEach(file => {
                if ((/pratos_(.+)_plugin/).test(file)) {
                    res += '"' + file + '":';
                    if (pluginsName.indexOf(file.replace('_plugin', '')) > -1) {

                        res += '1,';
                    } else {
                        res += '0,';
                    }
                }

            });

            if (res != '{"plugins":{') {
                res = jsonFormat(JSON.parse(res.slice(0, -1) + '}}'), config);
            } else {
                res = '{"plugins":}';
            }
            return callback(res);
        });
    });
}
function togglePlugins(pluginsList, callback) {
    var pluginsName = Object.keys(pluginsList.plugins),
    nPlugins = pluginsName.length;
    fs.readFile(path + "/conf/settings.json", 'utf8', function (err, settingsFile) {
        var settingsFile = JSON.parse(settingsFile);
        settingsFile.plugins = [];
        for (var e = 0; e < nPlugins; e++) {
            if (pluginsList.plugins[pluginsName[e]] == 1) {
                settingsFile.plugins.push(pluginsName[e].replace('_plugin', ''));
            }
        }
        fs.writeFile(path + "/conf/settings.json", jsonFormat(settingsFile, config));
    });

    return callback();
}
