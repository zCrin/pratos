var fs = require("fs");
var Cookies = require("cookies");
var User = require("pratos_user_class");
var jsonFormat = require("json-format");
var cmd=require('node-cmd');
var config = {
    type: 'tab',
    size: 1
  }

const path = __dirname.replace('/node_modules/pratos_plugin_class', '');
module.exports = {
	list: function(globalvariable, app, callback){
globalvariable.pluginsSettings = Object();
		globalvariable.navbarPlugins = Object();
		globalvariable.homepagePlugins = Object();
		globalvariable.contentPlugins = Array();
		fs.readFile(path + "/conf/settings.json", 'utf8', function(err, data){
			var txt = JSON.parse(data);
			var pluginsName = txt.plugins;
			var numberOfPlugins = pluginsName.length;
			for(var i = 0; i < numberOfPlugins; i++){
				var conf = require(pluginsName[i] + "_plugin").config();
				if(conf.navbar){
					globalvariable.navbarPlugins[pluginsName[i]] = pluginsName[i] + "_plugin";
				}
				if(conf.on_homepage){
					globalvariable.homepagePlugins[pluginsName[i]] = pluginsName[i] + "_plugin";
				}
				if(conf.GET){
					require(pluginsName[i] + "_plugin").get(app,globalvariable);
				}
				if(conf.POST){
					require(pluginsName[i] + "_plugin").post(app,globalvariable);
				}
				if(conf.on_content){
					globalvariable.contentPlugins = require(pluginsName[i] + "_plugin").content(globalvariable.contentPlugins);
				}
if(conf.has_settings){
		globalvariable.pluginsSettings[pluginsName[i]] =
require(pluginsName[i] + "_plugin").has_settings(globalvariable);
				}
				if(conf.ALL){
					require(pluginsName[i] + "_plugin").ALL(app,globalvariable);
				}
				if(conf.EVENT){
					require(pluginsName[i] + "_plugin").event(globalvariable);
				}
			}
			return callback(globalvariable);
		});
	},
	webPages:function(app, globalVariable){
		app.get('/list_plugins/', function(req, res) {
			
			User.verify_connection(req.user_id,globalVariable, function(user_res){
				if(user_res == true){
					res.setHeader('Content-Type', 'application/json');
					list_plugins(function(data){res.end(data);});
				}
			});
		});
		app.post('/toggle_plugins/', function(req, res) {
			var pluginsList = globalVariable[req.user_id].request.body.pluginsList;
			User.verify_connection(req.user_id,globalVariable, function(user_res){
				if(user_res == true){
					res.setHeader('Content-Type', 'text/html');

					togglePlugins(pluginsList,function(){
					
					res.end("reboot_allowed");
});
				}
			});
		});
app.post('/remove_plugins/', function(req, res) {
	if(globalVariable[req.user_id].request.body.pluginsList){
		User.verify_connection(req.user_id,globalVariable, function(user_res){
			if(user_res == true){
				var pluginsList = globalVariable[req.user_id].request.body.pluginsList;
				res.setHeader('Content-Type', 'text/html');
				var text = '',
					nPlugins = pluginsList.length;

				list_plugins(function(settings){
settings = JSON.parse(settings);
console.log(settings.plugins);
					for(var u = 0; u < nPlugins; u++){
						settings.plugins[pluginsList[u]] = 0;
						text += "npm remove " + pluginsList[u] + " && ";
					}
					text = "cd /var/www/pratos/ && " + text.slice(0,-4);
						togglePlugins(settings,function(){
							cmd.get(text, function(){
								res.end("reboot_allowed");
							});
						});
				});
			}
		});
	}
	else{
		res.end("reboot_not_allowed");
	}
});
	}
};
function list_plugins(callback){
const testFolder = path + '/node_modules/';
var res = '{"plugins":{';
fs.readFile(path + "/conf/settings.json", 'utf8', function(err, data){
			var txt = JSON.parse(data);
			var pluginsName = txt.plugins;

fs.readdir(testFolder, (error, files) => {
  files.forEach(file => {
	if((/pratos_(.+)_plugin/).test(file)){
res += '"' + file + '":';
	if(pluginsName.indexOf(file.replace('_plugin','')) > -1){

    res += '1,';
	}
else{
res += '0,';
}
	}

  });

if(res != '{"plugins":{'){
res = jsonFormat(JSON.parse(res.slice(0, -1)+ '}}'), config);
}
else{
res = '{"plugins":}';
}
return callback(res);
});
});
}
function togglePlugins(pluginsList,callback){
var pluginsName = Object.keys(pluginsList.plugins),
			nPlugins = pluginsName.length;
fs.readFile(path + "/conf/settings.json", 'utf8', function(err, settingsFile){
			var settingsFile = JSON.parse(settingsFile);
settingsFile.plugins = [];
for(var e =0; e < nPlugins; e++){
if(pluginsList.plugins[pluginsName[e]] == 1){
settingsFile.plugins.push(pluginsName[e].replace('_plugin',''));
}
}
fs.writeFile(path + "/conf/settings.json", jsonFormat(settingsFile,config));
});

return callback();

}