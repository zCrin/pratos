
const path = __dirname.replace('/node_modules/pratos_style_class', '');
const fs = require('fs');
const pngToIco = require('png-to-ico');
var colors = 0;
var User = require("pratos_user_class");
var working = 0;
var gV;
module.exports = {
	init: function(globalVariable) {
		gV = globalVariable;
		module.exports.get_global_color(function(r, g, b, a) {
			globalVariable.colorStyle = {
				r: r,
				g: g,
				b: b,
				a: a
			};
		});
		
		var secondColorStyle;
		module.exports.get_background_color(function(r, g, b, a) {
			globalVariable.secondColorStyle = {
				r: r,
				g: g,
				b: b,
				a: a
			};
		});
	},
	ioConnection: function(client, globalVariable) {
		client.on('updateCSSRequest', function(global, bck) {
			User.verify_connection(client.user_id, globalVariable, function(user_res) {
				if (user_res == true) {
					if (!working) {
						working = 1;
						client.emit('updateCSS', 'starting', 0);
						var y = new RegExp("^rgb\\(([0-9]+),( )([0-9]+),( )([0-9]+)\\)$");
						if (y.test(global)) {
							client.emit('updateCSS', 'Setting new global color', 1);
							module.exports.set_global_colors(parseInt(RegExp.$1), parseInt(RegExp.$3), parseInt(RegExp.$5), 255, function() {
								
									var u = new RegExp("^rgb\\(([0-9]+),( )([0-9]+),( )([0-9]+)\\)$");
									if (u.test(bck)) {
										module.exports.set_background_colors(parseInt(RegExp.$1), parseInt(RegExp.$3), parseInt(RegExp.$5), 255, function() {
											client.emit('updateCSS', 'new background color set', 6);
											var tr = setInterval(function() {
												client.emit('updateCSS', 'new background color set', 6);
											}, 5000);
											client.on('updateCSSConfirm', function() {
												clearInterval(tr);
												working = 0;
											});
											module.exports.get_global_color(function(r, g, b, a) {
												gV.colorStyle = {
													r: r,
													g: g,
													b: b,
													a: a
												};
											});;
											module.exports.get_background_color(function(r, g, b, a) {
												gV.secondColorStyle = {
													r: r,
													g: g,
													b: b,
													a: a
												};
											});
											working = 0;
										});
									} else {
										client.emit('updateCSSERROR', "error3:" + global + "_" + bck);
										working = 0;
									}
								
							});
						} else {
							client.emit('updateCSSERROR', "error:" + global + "_" + bck);
							working = 0;
						}
					}
				}
			});
		});
	},
	get_global_color: function(callback) {
		if (!colors) {
			fs.readFile(__dirname + "/colors.txt", 'utf8', function(err, data) {
				colors = JSON.parse(data);
				return callback(colors.global_color.r, colors.global_color.g, colors.global_color.b, colors.global_color.a);
			});
		} else {
			return callback(colors.global_color.r, colors.global_color.g, colors.global_color.b, colors.global_color.a);
		}
	},
	get_background_color: function(callback) {
		if (!colors) {
			fs.readFile(__dirname + "/colors.txt", 'utf8', function(err, data) {
				colors = JSON.parse(data);
				return callback(colors.background_color.r, colors.background_color.g, colors.background_color.b, colors.background_color.a);
			});
		} else {
			return callback(colors.background_color.r, colors.background_color.g, colors.background_color.b, colors.background_color.a);
		}
	},
	set_global_colors: function(r, g, b, a, callback) {
		if (!colors) {
			fs.readFile(__dirname + "/colors.txt", 'utf8', function(err, data) {
				colors = JSON.parse(data);
				colors.global_color = {
					r: r,
					g: g,
					b: b,
					a: a
				};
				fs.writeFile(__dirname + "/colors.txt", JSON.stringify(colors), function() {
					return callback(true);
				});
			});
		} else {
			colors.global_color = {
				r: r,
				g: g,
				b: b,
				a: a
			};
			fs.writeFile(__dirname + "/colors.txt", JSON.stringify(colors), function() {
				return callback(true);
			});
		}
	},
	set_background_colors: function(r, g, b, a, callback) {
		if (!colors) {
			fs.readFile(__dirname + "/colors.txt", 'utf8', function(err, data) {
				colors = JSON.parse(data);
				colors.background_color = {
					r: r,
					g: g,
					b: b,
					a: a
				};
				fs.writeFile(__dirname + "/colors.txt", JSON.stringify(colors), function() {
					return callback(true);
				});
			});
		} else {
			colors.background_color = {
				r: r,
				g: g,
				b: b,
				a: a
			};
			fs.writeFile(__dirname + "/colors.txt", JSON.stringify(colors), function() {
				return callback(true);
			});
		}
	},
	change_colorsApi: function(user_id, globalVariable, callback) {
		var y = new RegExp("^rgb\\(([1-9]+), ([1-9]+), ([1-9]+)\\)$");
		if (y.test(globalVariable[user_id].request.query.globalColor)) {
			this.set_global_colors(parseInt(RegExp.$1), parseInt(RegExp.$2), parseInt(RegExp.$3), 255, function() {
				module.exports.change_logo_color(parseInt(RegExp.$1), parseInt(RegExp.$2), parseInt(RegExp.$3), 255, function() {
					var u = new RegExp("^rgb\\(([1-9]+), ([1-9]+), ([1-9]+)\\)$");
					if (u.test(globalVariable[user_id].request.query.bck)) {
						module.exports.set_background_colors(parseInt(RegExp.$1), parseInt(RegExp.$2), parseInt(RegExp.$3), 255, function() {
							return callback("done");
						});
					}
				});
			});
		}
	},
	
};
