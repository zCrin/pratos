var MongoClient = require("mongodb").MongoClient;
var cmd=require('node-cmd');
const request = require("request");
var useragent = require('user-agent-parser');
var mongoDB;
var User = require("pratos_user_class");
MongoClient.connect("mongodb://localhost/pratos", function(error, db) {
    if (error) throw error;
if(!error){
	console.log("Firewall : Connect\351 \340 la base de donn\351es.");
	
 mongoDB = db;
}
});


function getClientIP(req){
    var ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
		ip = ip.split(":");

return ip[(ip.length - 1)];
}


module.exports = {
	config:function(){
		var conf = Object();
		conf.ALL = true;
		conf.GET = true;
		conf.navbar = true;
		conf.EVENT = true;
cmd.get("cd " + __dirname + " && " + "sudo cat iptables-save.log | sudo iptables-restore -c && sudo cat ip6tables-save.log | sudo ip6tables-restore -c ", function(err, stdout){
if (err) throw error;
if(!err){
console.log('Firewall : Fichiers de sauvegarde restaur\351s');
}
});
		return conf;
	},
	ALL:function(app, globalVariable){
		
		app.all('*', function(req, res,next) {
			next();
			record_informations(req);
		});
},
get:function(app, globalVariable){
		app.get('/firewall_allow', function(req, res) {
			

		User.verify_connection(req.user_id,globalVariable, function(user_res){
				if(user_res == true){
var ip = getClientIP(req);
					mongoDB.collection("firewall_allowed").update({ ip:ip}, 
{ ip:ip, timestamp: Date.now()},{upsert:true});
					res.redirect('/admin/index/');

				}
				else{
					res.redirect('/');
				}
			
		});
});
	},
navbar:function(nav){
		nav. create_grouped_link("Don't block", '<i class="fa fa-fire-extinguisher" aria-hidden="true"></i>', '/firewall_allow', 'Utilisateurs');
	},
event:function(globalVariable){
globalVariable.event.on('user',function(eventName,ip){
if(eventName == "try_connection:connected"){
console.log("t");
mongoDB.collection("firewall_allowed").update({ ip:ip}, 
{ ip:ip, timestamp: Date.now()},{upsert:true},function(err){
console.log(ip);
});
}
});
}

};
function record_informations(req){
	var patt = new RegExp('192.168.(.*)');
	req.headers.host = (!req.headers.host)? "": req.headers.host;
   	var hostname = ((req.headers.host).match(":"))?	req.headers.host.split(":")[0] : req.headers.host;
	var ip = getClientIP(req);
if(!patt.test(ip)){
mongoDB.collection("firewall_allowed").findOne({'ip': ip}, function(error, is_allowed) {

	if(!is_allowed){
		mongoDB.collection("bots").findOne({'ip.array': ip}, function(error, resultip) {
    		if (error) throw error;
				if(!resultip){
					console.log("No IP found");
					mongoDB.collection("bots").findOne({'hostname.array': hostname}, function(error, resultHostname) {
    					if (error) throw error;
						if(! resultHostname){
console.log("No Hostnames found");
							mongoDB.collection("bots").save({ ip: {'array':[ip]}, hostname: {'array':[hostname]}, timestamp: {'array':[Date.now()]}});

						}
else{
resultHostname.ip.array.push(ip);
resultHostname.timestamp.array.push(Date.now());
							mongoDB.collection("bots").update(
{'hostname.array': hostname},
    { ip: resultHostname.ip, hostname: resultHostname.hostname, timestamp: resultHostname.timestamp});
process_data(resultHostname);
}
					});
				}
				else{

					if( resultip.hostname.array. includes(hostname)){

resultip.timestamp.array.push(Date.now());
					mongoDB.collection("bots").update(
{'ip.array': ip},
   {$set: { timestamp: resultip.timestamp}}
);
process_data(resultip);
				}
					else{
resultip.hostname.array.push(hostname);
resultip.timestamp.array.push(Date.now());
mongoDB.collection("bots").update(
{'ip.array': ip},
    { ip: resultip.ip, hostname: resultip.hostname, timestamp : resultip.timestamp});
process_data(resultip);
				}
}
		});
}
});
	}
return true;
}
function process_data(result){

	var nbClled = result.timestamp.array.length;
	if(nbClled < 21 && nbClled > 9){
		var moyenneTimestamps = 0;
			for(var y = 1;y < (nbClled -1); y++){
				moyenneTimestamps += result.timestamp.array[y] - result.timestamp.array[y - 1];
			}
		var moyenne = moyenneTimestamps / (nbClled -1),
			diff = result.timestamp.array[nbClled -1] - result.timestamp.array[nbClled -2];

			if(diff <= moyenne + 400){
				ban_ip(result.ip.array);
				write_banned(result, 'Connection at regular interval (about every '+ moyenne + ' seconds');
			}
	}
else if(nbClled > 20){
ban_ip(result.ip.array);
write_banned(result, 'More than 20 connections without authentification');
}


return true;
}
function ban_ip(ip){
var nIp = ip.length;
for(var t = 0; t < nIp; t++){
cmd.get("sudo iptables -A INPUT -s "+ip[t]+" -j DROP && sudo iptables -A OUTPUT -s "+ip[t]+" -j DROP && sudo iptables -A FORWARD -s "+ip[t]+" -j DROP", function(err,stdout){
if (err) throw error;
if(!err){
console.log('Firewall : IP '+ ip[t] + ' bannie.');
}
								cmd.get("cd " + __dirname + " && " + "sudo iptables-save > iptables-save.log && sudo ip6tables-save > ip6tables-save.log",function(err,stdout){
if (err) throw error;
if(!err){
console.log('Firewall: fichiers de restauration sauvegard\351es.');
}});
							});
return true;

}
return true;
}
function write_banned(result, reason){

mongoDB.collection("banned_bots").save({ ip: result.ip, hostname: result.hostname, nbTimes: result.timestamp.array.length, reason:reason});
mongoDB.collection("bots").remove({ ip: result.ip});
return true;
}


