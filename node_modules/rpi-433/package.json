{
  "_args": [
    [
      {
        "raw": "rpi-433",
        "scope": null,
        "escapedName": "rpi-433",
        "name": "rpi-433",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/var/www/pratos/node_modules"
    ]
  ],
  "_from": "rpi-433@latest",
  "_id": "rpi-433@2.1.0",
  "_inCache": true,
  "_location": "/rpi-433",
  "_nodeVersion": "5.9.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/rpi-433-2.1.0.tgz_1463431168939_0.4312211216893047"
  },
  "_npmUser": {
    "name": "eroak",
    "email": "mr.eroak@gmail.com"
  },
  "_npmVersion": "3.7.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "rpi-433",
    "scope": null,
    "escapedName": "rpi-433",
    "name": "rpi-433",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/rpi-433/-/rpi-433-2.1.0.tgz",
  "_shasum": "cf2015b693078c328f886932c6ad221c94a9b41d",
  "_shrinkwrap": null,
  "_spec": "rpi-433",
  "_where": "/var/www/pratos/node_modules",
  "author": {
    "name": "eroak",
    "email": "mr.eroak@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/eroak/rpi-433/issues"
  },
  "dependencies": {
    "q": "^1.4.1",
    "underscore": "^1.8.3"
  },
  "description": "Simple NodeJS module to send and receive decimal codes through 433Mhz device on RaspberryPI 2",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "cf2015b693078c328f886932c6ad221c94a9b41d",
    "tarball": "https://registry.npmjs.org/rpi-433/-/rpi-433-2.1.0.tgz"
  },
  "gitHead": "6e91089ac3bb14a781082c685de0ab02a6839722",
  "homepage": "https://github.com/eroak/rpi-433#readme",
  "keywords": [
    "raspberry",
    "rasp",
    "raspi",
    "domotic",
    "433mhz",
    "sniffer",
    "sniff",
    "send",
    "receive",
    "nodejs",
    "outlets",
    "radio",
    "code",
    "wiringpi",
    "rc",
    "gpio"
  ],
  "license": "ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "eroak",
      "email": "mr.eroak@gmail.com"
    }
  ],
  "name": "rpi-433",
  "optionalDependencies": {},
  "readme": "# rpi-433\n[![npm version](https://badge.fury.io/js/rpi-433.svg)](http://badge.fury.io/js/rpi-433)\n\n[![NPM](https://nodei.co/npm/rpi-433.png?downloads=true)](https://nodei.co/npm/rpi-433/)\n\nSimple NodeJS module to send and receive decimal codes through 433Mhz device on RaspberryPI 2\n\n### Dependencies\n* wiringPi : https://projects.drogon.net/raspberry-pi/wiringpi/\n\n### Building WiringPi\n```bash\npi@raspberrypi ~ $ git clone git://git.drogon.net/wiringPi\n...\npi@raspberrypi ~ $ cd wiringPi/wiringPi\npi@raspberrypi ~/wiringPi/wiringPi $ sudo su\n...\nroot@raspberrypi:/home/pi/wiringPi/wiringPi# ./build\n```\n\n### Installation\n\n```bash\nnpm install rpi-433\n```\n\n### Usage\nFirstly, make sure you are running your application as root or with sudo, else the Raspberry Pi will not let you output/input to the GPIO and you'll get an error.\n```bash\nsudo node myscript.js\n```\n\nPlease note that there are different and confusing ways to reference a channel. This module supports wPi schema. Once wiringPi is installed, in your CLI you can run `gpio readall` and check the wPi column or consult https://projects.drogon.net/raspberry-pi/wiringpi/pins/\n\n```bash\ngpio readall\n```\n\n\n### Example\n\n```js\nvar rpi433    = require('rpi-433'),\n    rfSniffer = rpi433.sniffer({\n      pin: 2,                     //Snif on GPIO 2 (or Physical PIN 13)\n      debounceDelay: 500          //Wait 500ms before reading another code\n    }),\n    rfEmitter = rpi433.emitter({\n      pin: 0,                     //Send through GPIO 0 (or Physical PIN 11)\n      pulseLength: 350            //Send the code with a 350 pulse length\n    });\n\n// Receive (data is like {code: xxx, pulseLength: xxx})\nrfSniffer.on('data', function (data) {\n  console.log('Code received: '+data.code+' pulse length : '+data.pulseLength);\n});\n\n// Send\nrfEmitter.sendCode(1234, function(error, stdout) {   //Send 1234\n  if(!error) console.log(stdout); //Should display 1234\n});\n\n/* Or :\n\nrfEmitter.sendCode(code);\nrfEmitter.sendCode(code, {  //You can overwrite defaults options previously set (only for this sent)\n  pin: 2,\n  pulseLength: 350\n});\nrfEmitter.sendCode(code, callback);\nrfEmitter.sendCode(code, {\n  pin: 2,\n  pulseLength: 350\n}, callback);\n*/\n\n//rpi-433 uses the kriskowal's implementation of Promises so,\n//if you prefer Promises, you can also use this syntax :\nrfEmitter.sendCode(1234, {pin: 0})\n  .then(function(stdout) {\n    console.log('Code sent: ', stdout);\n  }, function(error) {\n    console.log('Code was not sent, reason: ', error);\n  });\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/eroak/rpi-433.git"
  },
  "scripts": {
    "install": "mkdir ./build && cd ./src && /usr/bin/make",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "2.1.0"
}
