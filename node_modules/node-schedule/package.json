{
  "_args": [
    [
      {
        "raw": "node-schedule",
        "scope": null,
        "escapedName": "node-schedule",
        "name": "node-schedule",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/var/www/pratos"
    ]
  ],
  "_from": "node-schedule@latest",
  "_id": "node-schedule@1.2.5",
  "_inCache": true,
  "_location": "/node-schedule",
  "_nodeVersion": "8.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/node-schedule-1.2.5.tgz_1505742627384_0.292869781376794"
  },
  "_npmUser": {
    "name": "sgimeno",
    "email": "santiago.gimeno@gmail.com"
  },
  "_npmVersion": "5.4.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-schedule",
    "scope": null,
    "escapedName": "node-schedule",
    "name": "node-schedule",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/node-schedule/-/node-schedule-1.2.5.tgz",
  "_shasum": "fb30f4e4d1dd1e81c536f9495d5da0e9e2d7de14",
  "_shrinkwrap": null,
  "_spec": "node-schedule",
  "_where": "/var/www/pratos",
  "author": {
    "name": "Matt Patenaude",
    "email": "matt@mattpatenaude.com",
    "url": "http://mattpatenaude.com"
  },
  "bugs": {
    "url": "https://github.com/node-schedule/node-schedule/issues"
  },
  "dependencies": {
    "cron-parser": "^2.4.0",
    "long-timeout": "0.1.1",
    "sorted-array-functions": "^1.0.0"
  },
  "description": "A cron-like and not-cron-like job scheduler for Node.",
  "devDependencies": {
    "coveralls": "^2.11.2",
    "eslint": "^3.19.0",
    "istanbul": "^0.4.5",
    "nodeunit": "^0.10.2",
    "sinon": "^1.14.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-15EhURVgJz1kIms3H6rKcOOcZGSaHGCwB6mTRUBWZnpv4OPbX6e01OTPeSzx0W+f5Hx7iWafmk17+PyhD9fejg==",
    "shasum": "fb30f4e4d1dd1e81c536f9495d5da0e9e2d7de14",
    "tarball": "https://registry.npmjs.org/node-schedule/-/node-schedule-1.2.5.tgz"
  },
  "gitHead": "47848425a59c0e55b185a69da5b9128979ab4365",
  "homepage": "https://github.com/node-schedule/node-schedule#readme",
  "keywords": [
    "schedule",
    "task",
    "job",
    "cron"
  ],
  "license": "MIT",
  "main": "./lib/schedule.js",
  "maintainers": [
    {
      "name": "jonhester",
      "email": "jon@hester.io"
    },
    {
      "name": "sgimeno",
      "email": "santiago.gimeno@gmail.com"
    },
    {
      "name": "mattpat",
      "email": "matt@mattpatenaude.com"
    },
    {
      "name": "tejasmanohar",
      "email": "me@tejas.io"
    }
  ],
  "name": "node-schedule",
  "optionalDependencies": {},
  "readme": "# Node Schedule\n\n[![NPM version](http://img.shields.io/npm/v/node-schedule.svg)](https://www.npmjs.com/package/node-schedule)\n[![Downloads](https://img.shields.io/npm/dm/node-schedule.svg)](https://www.npmjs.com/package/node-schedule)\n[![Build Status](https://travis-ci.org/node-schedule/node-schedule.svg?branch=master)](https://travis-ci.org/node-schedule/node-schedule)\n[![Join the chat at https://gitter.im/node-schedule/node-schedule](https://img.shields.io/badge/gitter-chat-green.svg)](https://gitter.im/node-schedule/node-schedule?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![NPM](https://nodei.co/npm/node-schedule.png?downloads=true)](https://nodei.co/npm/node-schedule/)\n\nNode Schedule is a flexible cron-like and not-cron-like job scheduler for Node.js.\nIt allows you to schedule jobs (arbitrary functions) for execution at\nspecific dates, with optional recurrence rules. It only uses a single timer\nat any given time (rather than reevaluating upcoming jobs every second/minute).\n\n## Usage\n\n### Installation\n\nYou can install using [npm](https://www.npmjs.com/package/node-schedule).\n\n```\nnpm install node-schedule\n```\n\n### Overview\n\nNode Schedule is for time-based scheduling, not interval-based scheduling.\nWhile you can easily bend it to your will, if you only want to do something like\n\"run this function every 5 minutes\", you'll find `setInterval` much easier to use,\nand far more appropriate. But if you want to, say, \"run this function at the :20\nand :50 of every hour on the third Tuesday of every month,\" you'll find that\nNode Schedule suits your needs better. Additionally, Node Schedule has Windows\nsupport unlike true cron since the node runtime is now fully supported.\n\nNote that Node Schedule is designed for in-process scheduling, i.e. scheduled jobs\nwill only fire as long as your script is running, and the schedule will disappear\nwhen execution completes. If you need to schedule jobs that will persist even when\nyour script *isn't* running, consider using actual [cron].\n\n### Jobs and Scheduling\n\nEvery scheduled job in Node Schedule is represented by a `Job` object. You can\ncreate jobs manually, then execute the `schedule()` method to apply a schedule,\nor use the convenience function `scheduleJob()` as demonstrated below.\n\n`Job` objects are `EventEmitter`'s, and emit a `run` event after each execution.\nThey also emit a `scheduled` event each time they're scheduled to run, and a\n`canceled` event when an invocation is canceled before it's executed (both events\nreceive a JavaScript date object as a parameter). Note that jobs are scheduled the\nfirst time immediately, so if you create a job using the `scheduleJob()`\nconvenience method, you'll miss the first `scheduled` event, but you can query the\ninvocation manually (see below). Also note that `canceled` is the single-L American\nspelling.\n\n### Cron-style Scheduling\n\nThe cron format consists of:\n```\n*    *    *    *    *    *\n┬    ┬    ┬    ┬    ┬    ┬\n│    │    │    │    │    |\n│    │    │    │    │    └ day of week (0 - 7) (0 or 7 is Sun)\n│    │    │    │    └───── month (1 - 12)\n│    │    │    └────────── day of month (1 - 31)\n│    │    └─────────────── hour (0 - 23)\n│    └──────────────────── minute (0 - 59)\n└───────────────────────── second (0 - 59, OPTIONAL)\n```\n\nExamples with the cron format:\n\n```js\nvar schedule = require('node-schedule');\n\nvar j = schedule.scheduleJob('42 * * * *', function(){\n  console.log('The answer to life, the universe, and everything!');\n});\n```\n\nExecute a cron job when the minute is 42 (e.g. 19:42, 20:42, etc.).\n\nAnd:\n\n```js\nvar j = schedule.scheduleJob('0 17 ? * 0,4-6', function(){\n  console.log('Today is recognized by Rebecca Black!');\n});\n```\n\nExecute a cron job every 5 Minutes = */5 * * * *\n\n#### Unsupported Cron Features\n\nCurrently, `W` (nearest weekday), `L` (last day of month/week), and `#` (nth weekday\nof the month) are not supported. Most other features supported by popular cron\nimplementations should work just fine.\n\n[cron-parser] is used to parse crontab instructions.\n\n### Date-based Scheduling\n\nSay you very specifically want a function to execute at 5:30am on December 21, 2012.\nRemember - in JavaScript - 0 - January, 11 - December.\n\n```js\nvar schedule = require('node-schedule');\nvar date = new Date(2012, 11, 21, 5, 30, 0);\n\nvar j = schedule.scheduleJob(date, function(){\n  console.log('The world is going to end today.');\n});\n```\n\nTo use current data in the future you can use binding:\n\n```js\nvar schedule = require('node-schedule');\nvar date = new Date(2012, 11, 21, 5, 30, 0);\nvar x = 'Tada!';\nvar j = schedule.scheduleJob(date, function(y){\n  console.log(y);\n}.bind(null,x));\nx = 'Changing Data';\n```\nThis will log 'Tada!' when the scheduled Job runs, rather than 'Changing Data',\nwhich x changes to immediately after scheduling.\n\n### Recurrence Rule Scheduling\n\nYou can build recurrence rules to specify when a job should recur. For instance,\nconsider this rule, which executes the function every hour at 42 minutes after the hour:\n\n```js\nvar schedule = require('node-schedule');\n\nvar rule = new schedule.RecurrenceRule();\nrule.minute = 42;\n\nvar j = schedule.scheduleJob(rule, function(){\n  console.log('The answer to life, the universe, and everything!');\n});\n```\n\nYou can also use arrays to specify a list of acceptable values, and the `Range`\nobject to specify a range of start and end values, with an optional step parameter.\nFor instance, this will print a message on Thursday, Friday, Saturday, and Sunday at 5pm:\n\n```js\nvar rule = new schedule.RecurrenceRule();\nrule.dayOfWeek = [0, new schedule.Range(4, 6)];\nrule.hour = 17;\nrule.minute = 0;\n\nvar j = schedule.scheduleJob(rule, function(){\n  console.log('Today is recognized by Rebecca Black!');\n});\n```\n\n#### RecurrenceRule properties\n\n- `second`\n- `minute`\n- `hour`\n- `date`\n- `month`\n- `year`\n- `dayOfWeek`\n\n> **Note**: It's worth noting that the default value of a component of a recurrence rule is\n> `null` (except for second, which is 0 for familiarity with cron). *If we did not\n> explicitly set `minute` to 0 above, the message would have instead been logged at\n> 5:00pm, 5:01pm, 5:02pm, ..., 5:59pm.* Probably not what you want.\n\n#### Object Literal Syntax\n\nTo make things a little easier, an object literal syntax is also supported, like\nin this example which will log a message every Sunday at 2:30pm:\n\n```js\nvar j = schedule.scheduleJob({hour: 14, minute: 30, dayOfWeek: 0}, function(){\n  console.log('Time for tea!');\n});\n```\n\n#### Set StartTime and EndTime\n\nIt will run after 5 seconds and stop after 10 seconds in this example.\nThe ruledat supports the above.\n\n```js\nlet startTime = new Date(Date.now() + 5000);\nlet endTime = new Date(startTime.getTime() + 5000);\nvar j = schedule.scheduleJob({ start: startTime, end: endTime, rule: '*/1 * * * * *' }, function(){\n  console.log('Time for tea!');\n});\n```\n\n### Handle Jobs and Job Invocations\n\nThere are some function to get informations for a Job and to handle the Job and\nInvocations.\n\n\n#### job.cancel(reshedule)\nYou can invalidate any job with the `cancel()` method:\n\n```js\nj.cancel();\n```\nAll planned invocations will be canceled. When you set the parameter ***reschedule***\nto true then the Job is newly scheduled afterwards.\n\n#### job.cancelNext(reshedule)\nThis method invalidates the next planned invocation or the job.\nWhen you set the parameter ***reschedule*** to true then the Job is newly scheduled\nafterwards.\n\n#### job.reschedule(spec)\nThis method cancels all pending invocation and registers the Job completely new again using the given specification.\nReturn true/false on success/failure.\n\n#### job.nextInvocation()\nThis method returns a Date object for the planned next Invocation for this Job. If no invocation is planned the method returns null.\n\n## Contributing\n\nThis module was originally developed by [Matt Patenaude], and is now maintained by\n[Tejas Manohar] and [other wonderful contributors].\n\nWe'd love to get your contributions. Individuals making significant and valuable\ncontributions are given commit-access to the project to contribute as they see fit.\n\nBefore jumping in, check out our [Contributing] page guide!\n\n## Copyright and license\n\nCopyright 2015 Matt Patenaude.\n\nLicensed under the **[MIT License] [license]**.\n\n\n[cron]: http://unixhelp.ed.ac.uk/CGI/man-cgi?crontab+5\n[Contributing]: https://github.com/node-schedule/node-schedule/blob/master/CONTRIBUTING.md\n[Matt Patenaude]: https://github.com/mattpat\n[Tejas Manohar]: http://tejas.io\n[license]: https://github.com/node-schedule/node-schedule/blob/master/LICENSE\n[Tejas Manohar]: https://github.com/tejasmanohar\n[other wonderful contributors]: https://github.com/node-schedule/node-schedule/graphs/contributors\n[cron-parser]: https://github.com/harrisiirak/cron-parser\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/node-schedule/node-schedule.git"
  },
  "scripts": {
    "lint": "eslint lib test",
    "test": "nodeunit"
  },
  "version": "1.2.5"
}
