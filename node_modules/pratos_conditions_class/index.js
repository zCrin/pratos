var User = require("pratos_user_class");
var fs = require('fs');
var oldAccess;
var isFirstLoad=1;
var jsonFormat = require("json-format");
var cmd=require('node-cmd');
var config = {
    type: 'tab',
    size: 1
  }
var Accessories = require("pratos_accessories_class");
var uuidV1 = require('uuid/v1');
const path = __dirname.replace('/node_modules/pratos_conditions_class', '');
module.exports = {
load:function(globalVariable){
Accessories.list_accessories(globalVariable, function(data){
			
					if(isJson(data) ){
data = JSON.parse(data);

if(data.accessories &&isFirstLoad){
oldAccess = data;
isFirstLoad=0;

}
}
globalVariable.event.on("accessories", function(event,data){
if(event =="change:detected"){
if(isJson(data) ){
data = JSON.parse(data);

if(data.accessories ){
if(isFirstLoad){
oldAccess = data;
isFirstLoad=0;
}else{
					all_infos = data.accessories;
				var f = all_infos.length;
var states=['des','act'];
  		for(var z=0; z<f; z++){
			
			val = all_infos[z];

if(!oldAccess. accessories[z] || val.state != oldAccess. accessories[z].state){
globalVariable.event.emit(val.aid+states[val.state]);
}
}
}
oldAccess = data;
}
}
}
});
});
fs.readFile(__dirname+'/recipes.json','utf8', function(err, result){
var data = JSON.parse(result);
var recipseNames = Object.keys(data.recipes),
			nRecipse = recipseNames.length;
for(var d=0;d<nRecipse;d++){
var e = require(__dirname+'/recipes/'+ data.recipes[recipseNames[d]]+".js");
e.init(globalVariable);
}
});
},
functions:{
homebridge_turnOn:function(accessory, globalVariable){
var e = accessory.split('-');

		
				Accessories.change_state(e[0],e[1],1,globalVariable, function(data){

return true;
});
},
homebridge_turnOff:function(accessory, globalVariable){
var e = accessory.split('-');

		
				Accessories.change_state(e[0],e[1],0,globalVariable, function(data){

return true;
});
},
homebridge_getState:function(accessory, globalVariable,callback){

Accessories.list_accessories(globalVariable, function(data){
			
					data=JSON.parse(data);
callback(data.accessories[0].state);
				},true, accessory);
 
     
    
},
homebridge_getTemperature:function(accessory, globalVariable,callback){

Accessories.list_accessories(globalVariable, function(data){
			
					data=JSON.parse(data);
callback(data.accessories[0].state);
				},true, accessory);
 
     
    
},
pratos_state:function(state, globalVariable){
globalVariable.event.emit("system", state);
	

	
	cmd.get("sudo /etc/init.d/pratos "+state, function(err,data){
console.log(err);
console.log(data);
process.exit(-1);
	});
}, pratos_pluginsDo:function(name,action, globalVariable,callback){
if(action == 'remove'){
truelist_plugins(function(settings){


					
						settings.plugins[name] = 0;
						
						togglePlugins(settings,function(){
							cmd.get('cd /var/www/pratos/ && npm remove ' + name , function(){
								callback();
							});
						});
				});



}else{
truelist_plugins(function(settings){


					
						settings.plugins[name] = (action == 'activate')?1:0;
						
						togglePlugins(settings,function(){
callback();
});
});
}
}
},
	webFiles:function(app, globalVariable){
app.post("/conditionsRegister", function(req, res) {
User.verify_connection(req.user_id,globalVariable , function(user_res){
				if(user_res == true){
fs.readFile(__dirname+'/recipes.json','utf8', function(err, result){
var data = JSON.parse(result);
req.body.code = "var schedule = require('node-schedule'); functions = require('pratos_conditions_class').functions; module.exports ={ init : function(globalVariable){"+ req.body.code+"}};";
if(data.recipes[req.body.name]){
if(req.body.changeConfirmed){
fs.writeFile(__dirname+'/recipes/'+ data.recipes[req.body.name] +".js", req.body.code);
fs.writeFile(__dirname+'/recipes/'+ data.recipes[req.body.name] +".xml", req.body.workspace);
res.end('1');
}
else{
res.end('0');
}
}
else{

var filename = uuidV1();
data.recipes[req.body.name] = filename;
fs.writeFile(__dirname+'/recipes.json',JSON.stringify(data));
fs.writeFile(__dirname+'/recipes/'+ data.recipes[req.body.name] +".xml", req.body.workspace);
fs.writeFile(__dirname+'/recipes/'+ filename +".js", req.body.code);
res.end('1');
}
});
}
else{
					res.redirect("/");
				}
				delete globalVariable[req.user_id];
			});
});
app.get('/recipes_list/', function(req, res) {
User.verify_connection(req.user_id,globalVariable , function(user_res){
				if(user_res == true){
var e = {"recipes":[]};
fs.readFile(__dirname+'/recipes.json','utf8', function(err, result){
var data = JSON.parse(result);
var recipseNames = Object.keys(data.recipes),
			nRecipse = recipseNames.length;
for(var d=0;d<nRecipse;d++){
e.recipes.push(recipseNames[d]);
}
res.end(JSON.stringify(e));
});

}
else{
					res.redirect("/");
				}
				delete globalVariable[req.user_id];
			});
});
		app.get('/blocks.js', function(req, res) {
			User.verify_connection(req.user_id,globalVariable , function(user_res){
				if(user_res == true){
					fs.readFile(__dirname+'/assets/blocks.json','utf8', function(err, result){
						
						result = JSON.parse(result);
list_plugins(result,function(resy){
						 add_homebridge(resy,globalVariable,function(blocks2){
							 	var f = blocks2.length;

								var t="";
  		for(var z=0; z<f; z++){
			t += "Blockly.Blocks['"+blocks2[z].type+"'] = {init: function() {this.jsonInit("+JSON.stringify(blocks2[z])+");}};"


		}
						res.setHeader('Content-Type', 'application/javascript');
						res.end(t);
						 });
						
						});
					});
				}
				else{
					res.redirect("/");
				}
				delete globalVariable[req.user_id];
			});
		});
	}
};	
function add_homebridge(blocks,globalVariable,callback){
	
	  
				Accessories.list_accessories(globalVariable,function(data){
					data = JSON.parse(data);
					all_infos = data.accessories;
				var f = all_infos.length;
  		for(var z=0; z<f; z++){
			
			val = all_infos[z];
				
					if(val.iid != "" && !(/Sensor/).test(val.category)){
					blocks[0].args0[0].options.push([val.name,val.aid + '-'+ val.iid] );
					blocks[1].args0[0].options.push([val.name,val.aid + '-'+ val.iid] );
}
if(val.iid != "" || (/Sensor/).test(val.category)){
blocks[4].args0[0].options.push([val.name, val.aid] );
				} 
				if(val.category == "Temperature Sensor"){
				blocks[2].args0[0].options.push([val.name, val.aid] );
				}
		blocks[3].args0[0].options.push([val.name, val.aid] );
			}
			return callback(blocks);
				});
				}
				
function isJson(str) { //function to know if a variable is JSON 
    try {
        JSON.parse(str);
    } catch (e) {
		console.log(str);
        return false;
    }
    return true;
}
function list_plugins(blocks,callback){
const testFolder = path + '/node_modules/';
var res = [];


fs.readdir(testFolder, (error, files) => {
  files.forEach(file => {
	if((/pratos_(.+)_plugin/).test(file)){

blocks[6].args0[0].options.push([file. replace("pratos_","").replace("_plugin",""),file]);
}
  });


return callback(blocks);
});
}
function truelist_plugins(callback){
const testFolder = path + '/node_modules/';
var res = '{"plugins":{';
fs.readFile(path + "/conf/settings.json", 'utf8', function(err, data){
			var txt = JSON.parse(data);
			var pluginsName = txt.plugins;

fs.readdir(testFolder, (error, files) => {
  files.forEach(file => {
	if((/pratos_(.+)_plugin/).test(file)){
res += '"' + file + '":';
	if(pluginsName.indexOf(file.replace('_plugin','')) > -1){

    res += '1,';
	}
else{
res += '0,';
}
	}

  });

if(res != '{"plugins":{'){
res = JSON.parse(res.slice(0, -1)+ '}}');
}
else{
res = '{"plugins":}';
}
return callback(res);
});
});
}
function togglePlugins(pluginsList,callback){
var pluginsName = Object.keys(pluginsList.plugins),
			nPlugins = pluginsName.length;
fs.readFile(path + "/conf/settings.json", 'utf8', function(err, settingsFile){
			var settingsFile = JSON.parse(settingsFile);
settingsFile.plugins = [];
for(var e =0; e < nPlugins; e++){
if(pluginsList.plugins[pluginsName[e]] == 1){
settingsFile.plugins.push(pluginsName[e].replace('_plugin',''));
}
}
fs.writeFile(path + "/conf/settings.json", jsonFormat(settingsFile,config));
});

return callback();

}