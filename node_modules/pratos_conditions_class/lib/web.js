var User = require("pratos_user_class"); 
var uuidV1 = require('uuid/v1');
var fs = require('fs');
var pathTo = __dirname.replace('/node_modules/pratos_conditions_class/lib', '/node_modules/pratos_conditions_class');
var path = __dirname.replace('/node_modules/pratos_conditions_class/lib', '');
var Accessories = require("pratos_accessories_class");
module.exports= webFiles;
function  webFiles(app, globalVariable){
	app.post("/conditionsRegister", function(req, res) {
		User.verify_connection(req.user_id,globalVariable , function(user_res){
			if(user_res == true){
				fs.readFile(pathTo +'/recipes.json','utf8', function(err, result){
					var data = JSON.parse(result);
					req.body.code = "var schedule = require('node-schedule'); functions = require('pratos_conditions_class').functions; module.exports ={ init : function(globalVariable){"+ req.body.code+"}};";
					if(data.recipes[req.body.name]){
						if(req.body.changeConfirmed){
							fs.writeFile(pathTo+'/recipes/'+ data.recipes[req.body.name] +".js", req.body.code);
							fs.writeFile(pathTo +'/recipes/'+ data.recipes[req.body.name] +".xml", req.body.workspace);
							res.end('1');
						}
						else{
							res.end('0');
						}
					}
					else{
						var filename = uuidV1();
						data.recipes[req.body.name] = filename;
						fs.writeFile(pathTo +'/recipes.json',JSON.stringify(data));
						fs.writeFile(pathTo +'/recipes/'+ data.recipes[req.body.name] +".xml", req.body.workspace);
						fs.writeFile(pathTo +'/recipes/'+ filename +".js", req.body.code);
						res.end('1');
					}
				});
			}
			else{
				res.redirect("/");
			}
			delete globalVariable[req.user_id];
		});
	});
	app.get('/recipes_list/', function(req, res) {
		User.verify_connection(req.user_id,globalVariable , function(user_res){
			if(user_res == true){
				var e = {"recipes":[]};
				fs.readFile(pathTo+'/recipes.json','utf8', function(err, result){
					var data = JSON.parse(result);
					var recipseNames = Object.keys(data.recipes),
					nRecipse = recipseNames.length;
					for(var d=0;d<nRecipse;d++){
						e.recipes.push(recipseNames[d]);
					}
					res.end(JSON.stringify(e));
				});
			}
			else{
				res.redirect("/");
			}
			delete globalVariable[req.user_id];
		});
	});
app.post('/recipe_code/', function(req, res) {
		User.verify_connection(req.user_id,globalVariable , function(user_res){
			if(user_res == true ){
				if(req.body.name){
					fs.readFile(pathTo+'/recipes.json','utf8', function(err, result){

						var data = JSON.parse(result);
					var filename = data.recipes[req.body.name];
fs.readFile(pathTo +'/recipes/'+ filename +".xml",'utf8', function(err, result){
						res.end(result);
});
					});
				}

else{
res.end('0');
}
			}
			else{
				res.redirect("/");
			}
			delete globalVariable[req.user_id];
		});
	});
app.post('/recipe_delete/', function(req, res) {
		User.verify_connection(req.user_id,globalVariable , function(user_res){
			if(user_res == true ){
				if(req.body.name){
					fs.readFile(pathTo+'/recipes.json','utf8', function(err, result){

						var data = JSON.parse(result);
if(data.recipes[req.body.name]){
					var filename = data.recipes[req.body.name];
delete data.recipes[req.body.name];
fs.unlink(pathTo +'/recipes/'+ filename +".xml");
fs.unlink(pathTo +'/recipes/'+ filename +".js");
fs.writeFile(pathTo +'/recipes.json',JSON.stringify(data),function(){
						res.end('1');
});
}else{
res.end('01');
}
					});
				}

else{
res.end('0');
}
			}
			else{
				res.redirect("/");
			}
			delete globalVariable[req.user_id];
		});
	});

	app.get('/blocks.js', function(req, res) {
		User.verify_connection(req.user_id,globalVariable , function(user_res){
			if(user_res == true){
				fs.readFile(pathTo+'/assets/blocks.json','utf8', function(err, result){
					result = JSON.parse(result);
					list_plugins(result,function(resy){
						 add_homebridge(resy,globalVariable,function(blocks2){
							 var f = blocks2.length;
							var t="";
  							for(var z=0; z<f; z++){
								t += "Blockly.Blocks['"+blocks2[z].type+"'] = {init: function() {this.jsonInit("+JSON.stringify(blocks2[z])+");}};"
							}
							res.setHeader('Content-Type', 'application/javascript');
							res.end(t);
						 });
					});
				});
			}
			else{
				res.redirect("/");
			}
			delete globalVariable[req.user_id];
		});
	});
}
function add_homebridge(blocks,globalVariable,callback){
	Accessories.list_accessories(globalVariable,function(data){
		data = JSON.parse(data);
		all_infos = data.accessories;
		var f = all_infos.length;
  		for(var z=0; z<f; z++){
			val = all_infos[z];
			if(val.iid != "" && !(/Sensor/).test(val.category)){
				blocks[0].args0[0].options.push([val.name,val.oldName] );
				blocks[1].args0[0].options.push([val.name,val.oldName] );
			}
			if(val.iid != "" || (/Sensor/).test(val.category)){
				blocks[4].args0[0].options.push([val.name, oldName] );
			} 
			if(val.category == "Temperature Sensor"){
				blocks[2].args0[0].options.push([val.name, oldName] );
			}
			blocks[3].args0[0].options.push([val.name, oldName] );
		}
		return callback(blocks);
	});
}
function list_plugins(blocks,callback){
	const testFolder = path + '/node_modules/';
	var res = [];
	fs.readdir(testFolder, (error, files) => {
		files.forEach(file => {
			if((/pratos_(.+)_plugin/).test(file)){
				blocks[6].args0[0].options.push([file. replace("pratos_","").replace("_plugin",""),file]);
			}
  		});
		return callback(blocks);
	});
}
				