var User = require("pratos_user_class");
var uuidV1 = require('uuid/v1');
var fs = require('fs');
var cmd = require('node-cmd');
var user_id;
var pathTo = __dirname.replace('/node_modules/pratos_conditions_class/lib', '/node_modules/pratos_conditions_class');
var path = __dirname.replace('/node_modules/pratos_conditions_class/lib', '');
var Accessories = require("pratos_accessories_class");
var colors = require('colors');
module.exports = webFiles;
var getNewBlocks = require(__dirname + "/loadPluginsBlocks.js")
function webFiles(app, globalVariable) {

    app.post("/conditionsRegister", function (req, res) {

        User.verify_connection(req.user_id, globalVariable, function (user_res) {
            if (user_res == true) {
                fs.readFile(pathTo + '/recipes.json', 'utf8', function (err, result) {
                    var data = JSON.parse(result);

                    globalVariable[req.user_id].request.bodyPratos.code = "functions = require('pratos_conditions_class').functions;\nmodule.exports ={\ninit : function(globalVariable){\n" + globalVariable[req.user_id].request.bodyPratos.code + "}};";
                    if (globalVariable[req.user_id].request.bodyPratos.recipeId && globalVariable[req.user_id].request.bodyPratos.recipeId != "0") {
                        data.recipes[globalVariable[req.user_id].request.bodyPratos.recipeId] = globalVariable[req.user_id].request.bodyPratos.name;
                        fs.writeFile(pathTo + '/recipes/' + globalVariable[req.user_id].request.bodyPratos.recipeId + ".js", globalVariable[req.user_id].request.bodyPratos.code, function () {
                            console.log(("\nSystem : updating recipe " + globalVariable[req.user_id].request.bodyPratos.name + " : .js file written").yellow)
                        });
                        fs.writeFile(pathTo + '/recipes/' + globalVariable[req.user_id].request.bodyPratos.recipeId + ".xml", globalVariable[req.user_id].request.bodyPratos.workspace, function () {
                            console.log(("\nSystem : updating recipe " + globalVariable[req.user_id].request.bodyPratos.name + " : .xml file written").yellow)
                        });
                        fs.writeFile(pathTo + '/recipes.json', JSON.stringify(data), function () {
                            console.log(("\nSystem : saving recipe " + globalVariable[req.user_id].request.bodyPratos.name + " change").yellow)
                            delete globalVariable[user_id];
                        });
                        res.end('1');

                    } else {

                        var filename = uuidV1();
                        data.recipes[filename] = globalVariable[req.user_id].request.bodyPratos.name;
                        fs.writeFile(pathTo + '/recipes.json', JSON.stringify(data), function () {
                            console.log(("\nSystem : registering recipe " + globalVariable[req.user_id].request.bodyPratos.name).yellow)
                        });
                        fs.writeFile(pathTo + '/recipes/' + filename + ".xml", globalVariable[req.user_id].request.bodyPratos.workspace, function () {
                            console.log(("\nSystem : updating recipe " + globalVariable[req.user_id].request.bodyPratos.name + " : .xml file written").yellow)
                        });
                        fs.writeFile(pathTo + '/recipes/' + filename + ".js", globalVariable[req.user_id].request.bodyPratos.code, function () {
                            console.log(("\nSystem : updating recipe " + globalVariable[req.user_id].request.bodyPratos.name + " : .js file written").yellow)
                        });

                        cmd.get("sudo chmod -R 777 " + pathTo + '/recipes/', function () {
                            console.log(("\nSystem : setting recipe file CHMOD to 777").yellow)
                        });
                        res.end('1');
                        delete globalVariable[user_id];
                    }
                });
            } else {
                res.redirect("/");
                delete globalVariable[user_id];
            }

        });
    });
    app.get('/recipes_list/', function (req, res) {

        User.verify_connection(req.user_id, globalVariable, function (user_res) {
            if (user_res == true) {

                fs.readFile(pathTo + '/recipes.json', 'utf8', function (err, result) {
                    res.end(result);
                    delete globalVariable[user_id];
                });
            } else {
                res.redirect("/");
                delete globalVariable[user_id];

            }

        });
    });
    app.post('/recipe_code/', function (req, res) {
        User.verify_connection(req.user_id, globalVariable, function (user_res) {
            if (user_res == true) {
                if (globalVariable[req.user_id].request.bodyPratos.recipeId) {

                    fs.readFile(pathTo + '/recipes/' + globalVariable[req.user_id].request.bodyPratos.recipeId + ".xml", 'utf8', function (err, result) {
                        res.end(result);
                        delete globalVariable[req.user_id];
                    });
                } else {
                    res.end('0');
                    delete globalVariable[req.user_id];
                }
            } else {
                res.redirect("/");
                delete globalVariable[req.user_id];
            }

        });
    });
    app.post('/recipe_delete/', function (req, res) {
        User.verify_connection(req.user_id, globalVariable, function (user_res) {
            if (user_res == true) {
                if (globalVariable[req.user_id].request.bodyPratos.recipeId) {

                    fs.readFile(pathTo + '/recipes.json', 'utf8', function (err, result) {

                        var data = JSON.parse(result);
                        if (data.recipes[globalVariable[req.user_id].request.bodyPratos.recipeId]) {
                            var name = data.recipes[globalVariable[req.user_id].request.bodyPratos.recipeId];
                            var filename = globalVariable[req.user_id].request.bodyPratos.recipeId;
                            delete data.recipes[globalVariable[req.user_id].request.bodyPratos.recipeId];
                            fs.unlink(pathTo + '/recipes/' + filename + ".xml", function () {
                                console.log(("\nSystem : deleted recipe XML " + name).yellow)
                            });
                            fs.unlink(pathTo + '/recipes/' + filename + ".js", function () {
                                console.log(("\nSystem : deleted recipe JS " + name).yellow)
                            });

                            fs.writeFile(pathTo + '/recipes.json', JSON.stringify(data), function () {
                                console.log(("\nSystem : saved recipe deletion ").yellow)
                                res.end('1');
                                delete globalVariable[req.user_id];

                            });
                        } else {
                            res.end('01');
                            delete globalVariable[req.user_id];
                        }
                    });
                } else {
                    res.end('0');
                    delete globalVariable[req.user_id];
                }
            } else {
                res.redirect("/");
                delete globalVariable[req.user_id];
            }

        });
    });

    app.get('/blocks.js', function (req, res) {

        User.verify_connection(req.user_id, globalVariable, function (user_res) {
            if (user_res == true) {
                fs.readFile(pathTo + '/assets/blocks.json', 'utf8', function (err, result) {
                    result = JSON.parse(result);
                    list_plugins(result, function (resy) {
                        add_homebridge(resy, globalVariable, function (blocks2) {
                            var f = blocks2.length;
                            var t = "";
                            for (var z = 0; z < f; z++) {
                                t += "Blockly.Blocks['" + blocks2[z].type + "'] = {init: function() {this.jsonInit(" + JSON.stringify(blocks2[z]) + ");}};"
                            }
                            res.setHeader('Content-Type', 'application/javascript');
                            getNewBlocks("js", globalVariable.RecipeBlockList, t, function (answer) {
                                res.end(answer);
                                delete globalVariable[req.user_id];
                            });
                        });
                    });
                });
            } else {
                res.redirect("/");
                delete globalVariable[req.user_id];
            }

        });
    });
    app.get('/blocks.exec.js', function (req, res) {

        User.verify_connection(req.user_id, globalVariable, function (user_res) {
            if (user_res == true) {
                fs.readFile(pathTo + '/assets/blocks.javascript', 'utf8', function (err, result) {

                    res.setHeader('Content-Type', 'application/javascript');
                    getNewBlocks("jsExec", globalVariable.RecipeBlockList, result, function (answer) {
                        res.end(answer);
                        delete globalVariable[req.user_id];
                    });
                });

            } else {
                res.redirect("/");
                delete globalVariable[req.user_id];
            }

        });
    });
    app.get('/blocks.xml', function (req, res) {

        User.verify_connection(req.user_id, globalVariable, function (user_res) {
            if (user_res == true) {
                fs.readFile(pathTo + '/assets/blocks.xml', 'utf8', function (err, result) {

                    getNewBlocks("xml", globalVariable.RecipeBlockList, result, function (answer) {

                        res.end(answer);
                        delete globalVariable[req.user_id];
                    });

                });

            } else {
                res.redirect("/");
                delete globalVariable[req.user_id];
            }

        });
    });
}
function add_homebridge(blocks, globalVariable, callback) {
    Accessories.list_accessories(globalVariable, function (data) {
        data = JSON.parse(data);
        all_infos = data.accessories;
        var f = all_infos.length;
        for (var z = 0; z < f; z++) {
            val = all_infos[z];
            if (val.iid != "" && !(/Sensor/).test(val.category)) {
                blocks[0].args0[0].options.push([val.name, val.oldName]);
                blocks[1].args0[0].options.push([val.name, val.oldName]);
            }
            if (val.iid != "" || (/Sensor/).test(val.category)) {
                blocks[4].args0[0].options.push([val.name, val.oldName]);
            }
            if (val.category == "Temperature Sensor") {
                blocks[2].args0[0].options.push([val.name, val.oldName]);
            }
            blocks[3].args0[0].options.push([val.name, val.oldName]);
        }
        return callback(blocks);
    });
}
function list_plugins(blocks, callback) {
    const testFolder = path + '/node_modules/';
    var res = [];
    fs.readdir(testFolder, (error, files) => {
        files.forEach(file => {
            if ((/pratos_(.+)_plugin/).test(file)) {
                blocks[6].args0[0].options.push([file.replace("pratos_", "").replace("_plugin", ""), file]);
            }
        });
        return callback(blocks);
    });
}
