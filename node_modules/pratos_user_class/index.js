const path = __dirname.replace('/node_modules/pratos_user_class', '');
var fs = require('fs');
module.exports = {

	verify_connection: function(user_id,globalVariable, callback){

		globalVariable.event.emit("user", "verify_connection");
		fs.readFile(path + "/conf/auto_allowed_devices.json", 'utf8', function(err, data){
			if(globalVariable[user_id].request.session.user_allowed != true){

				var device_allowed = globalVariable[user_id].cookies.get("device_allowed");
				if(device_allowed){

					var allowed_devices = JSON.parse(data);
					if(array_search(device_allowed, allowed_devices.authorised_devices)){
						globalVariable[user_id].request.session.user_allowed = true;
					}
					else{
						globalVariable[user_id].request.session.user_allowed = false;
					}
				}
				else{
					globalVariable[user_id].request.session.user_allowed = false;
				}
			}
			if(globalVariable[user_id].request.session.user_allowed == true){
				globalVariable.event.emit("user", "verify_connection:allowed");
				return callback(true);
			}
			else{
				globalVariable.event.emit("user","verify_connection:not_allowed");
				return callback(false);
			}
		});
	},
	connect_user: function(user_id,globalVariable, callback){
		globalVariable.event.emit("user", "try_connection");
		var Ban = require("pratos_ban_class");
			var ip = getClientIP(globalVariable[user_id].request);
			Ban.is_banned(globalVariable, ip, function(res){
				if(res){
					globalVariable.event.emit("user", "try_connection:not_connected");
					globalVariable[user_id].request.session.user_allowed = false;
					return callback(false);
				}
				else{
					fs.readFile(path + "/conf/settings.json", 'utf8', function(err, data){
						var settings = JSON.parse(data);
						if(settings.website.code == globalVariable[user_id].request.body.password){
							globalVariable.event.emit("user", "try_connection:connected", ip);
							Ban.stop_banning(globalVariable, ip);
							globalVariable[user_id].request.session.user_allowed = true;
							return callback(true);
						}
						else{
							globalVariable.event.emit("user", "try_connection:not_connected");
							Ban.more_banning(user_id,globalVariable, ip);
							return callback(false);
						}
					});
				}
			});
	},
	add_allowed_device: function(user_id,globalVariable, callback){

		fs.readFile(path + "/conf/auto_allowed_devices.json", 'utf8', function(err, data){
var answer = JSON.parse(data);

			
			const uuidV1 = require('uuid/v1');
			var uniqId = uuidV1();
			answer.authorised_devices[(Object.keys(answer.authorised_devices).length + 1)] = uniqId;

			fs.writeFile(path + "/conf/auto_allowed_devices.json", JSON.stringify(answer));
globalVariable.event.emit("user", "add_device");
			globalVariable[user_id].cookies.set('device_allowed', uniqId, {expires: new Date(253402300000000) });
			if(callback){
				return callback(true);
			}
		});
	}
};
function array_search(terms, array){
	var array_size = Object.keys(array).length;
	for(var i = 1; i <= array_size; i++){
		if(array[i] == terms){
			return true;
		}
		if(i == array_size){
			return false;
		}
	}
}
function getClientIP(req){
    var ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
		ip = ip.split(":");
return ip[(ip.length - 1)];
}