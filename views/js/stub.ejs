Blockly.JavaScript['allumer'] = function(block) {
 
  var val2 = block.getFieldValue('lightAccessories');
  var code = 'functions.homebridge_turnOn("'+val2+'",globalVariable); \n';
  return code;
};

Blockly.JavaScript['_teindre'] = function(block) {
  var dropdown_trnoff = block.getFieldValue('trnOFF');

  var code = 'functions.homebridge_turnOff("'+ dropdown_trnoff +'", globalVariable); \n';
  return code;
};

Blockly.JavaScript['temp_rature_de'] = function(block) {
  var dropdown_name = block.getFieldValue('NAME');
  var variable_state = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('state'), Blockly.Variables.NAME_TYPE);
  var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
  // TODO: Assemble JavaScript into code variable.
  var code = '...';
  // TODO: Change ORDER_NONE to the correct strength.
  var code = 'functions.homebridge_getTemperature("'+ dropdown_name +'", globalVariable,function('+ variable_state +'){'+ statements_name +'});\n';
  return [code, Blockly.JavaScript.ORDER_NONE];
};
Blockly.JavaScript['_tat_de'] = function(block) {
  var dropdown_name = block.getFieldValue('NAME');
  var variable_state = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('state'), Blockly.Variables.NAME_TYPE);
  var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
  // TODO: Assemble JavaScript into code variable.
  var code = 'functions.homebridge_getState("'+ dropdown_name +'", globalVariable,function('+ variable_state +'){'+ statements_name +'});\n';
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.JavaScript.ORDER_NONE];
  return code;
};



Blockly.JavaScript['quand'] = function(block) {
 var dropdown_name = block.getFieldValue('NAME');
 var dropdown_state = block.getFieldValue('state');
 var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
  // TODO: Assemble JavaScript into code variable.
  var code = 'globalVariable.event.on("'+ dropdown_name + dropdown_state+'",function(){'+ statements_name +'});';
  
  return code;
};

Blockly.JavaScript['pratos_set_state'] = function(block) {
  var dropdown_name = block.getFieldValue('NAME');
  // TODO: Assemble JavaScript into code variable.
var val = block.getFieldValue('NAME');
  var code = 'functions.pratos_state("'+val+'",globalVariable);';
  return code;
};

Blockly.JavaScript['plugins_do'] = function(block) {

  var dropdown_plugins = block.getFieldValue('plugins');
  var dropdown_name = block.getFieldValue('NAME');
  var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
 

  var code = 'functions.pratos_pluginsDo("'+ dropdown_plugins +'", "'+ dropdown_name +'",globalVariable ,function(){'+ statements_name +'});';
 
  return code;
};

Blockly.JavaScript['datetime'] = function(block) {
  var number_day = block.getFieldValue('day');
  var number_month = block.getFieldValue('month');
  var number_year = block.getFieldValue('year');
  var number_hour = block.getFieldValue('hour');
  var number_minutes = block.getFieldValue('minutes');
  var number_seconds = block.getFieldValue('seconds');
  var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
  // TODO: Assemble JavaScript into code variable.
  var code = 'schedule.scheduleJob(new Date('+ number_year +', '+(parseInt(number_month )-1)+', '+ number_day +', '+ number_hour +', '+ number_minutes +', '+ number_seconds +'),function(){ '+ statements_name +'});';
  return code;
};

Blockly.JavaScript['cronjob'] = function(block) {
  var text_cronval = block.getFieldValue('cronval');
  var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
  // TODO: Assemble JavaScript into code variable.
var val = block.getFieldValue('cronval');
  var code = 'schedule.scheduleJob("'+ val +'", function(){ '+statements_name+'});';
  return code;
};

Blockly.JavaScript['get_date'] = function(block) {
  // TODO: Assemble JavaScript into code variable.
  var code = 'Date.now()';
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.JavaScript.ORDER_NONE];
};
Blockly.JavaScript['timeout'] = function(block) {
  var number_sec = block.getFieldValue('sec');
  var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
  // TODO: Assemble JavaScript into code variable.
  var code = 'setTimeout(function(){'+statements_name+'},'+number_sec+');';
  return code;
};

Blockly.JavaScript['clearinterval'] = function(block) {
  var value_name = Blockly.JavaScript.valueToCode(block, 'NAME', Blockly.JavaScript.ORDER_ATOMIC);
  // TODO: Assemble JavaScript into code variable.
  var code = 'clearInterval('+value_name+');';
  return code;
};

Blockly.JavaScript['setinterval'] = function(block) {
  var number_name = block.getFieldValue('NAME');
  var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
  // TODO: Assemble JavaScript into code variable.
  var code = 'setInterval(function(){'+statements_name+'},'+number_name+')';
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.JavaScript.ORDER_NONE];
};
Blockly.JavaScript['request_get'] = function(block) {
  var dropdown_type = block.getFieldValue('type');
  var dropdown_format = block.getFieldValue('format');
  var text_httpget = block.getFieldValue('httpGet');
  var variable_name = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('NAME'), Blockly.Variables.NAME_TYPE);
  var variable_resp = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('resp'), Blockly.Variables.NAME_TYPE);
  var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
  // TODO: Assemble JavaScript into code variable.
  var code = '...;\n';
  return code;
};

Blockly.JavaScript['appreceive'] = function(block) {
  var text_path = block.getFieldValue('path');
  var dropdown_method = block.getFieldValue('method');
  var variable_req = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('req'), Blockly.Variables.NAME_TYPE);
  var variable_res = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('res'), Blockly.Variables.NAME_TYPE);
  var variable_globalvariable = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('globalVariable'), Blockly.Variables.NAME_TYPE);
  var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
  // TODO: Assemble JavaScript into code variable.
  var code = '...;\n';
  return code;
};

Blockly.JavaScript['cmd'] = function(block) {
  var text_cmd = block.getFieldValue('cmd');
  var variable_err = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('err'), Blockly.Variables.NAME_TYPE);
  var variable_rep = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('rep'), Blockly.Variables.NAME_TYPE);
  var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
  // TODO: Assemble JavaScript into code variable.
  var code = '...;\n';
  return code;
};

Blockly.JavaScript['portreceive'] = function(block) {
  var text_port = block.getFieldValue('port');
  var text_baudrate = block.getFieldValue('baudRate');
  var variable_data = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('data'), Blockly.Variables.NAME_TYPE);
  var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
  // TODO: Assemble JavaScript into code variable.
  var code = '...;\n';
  return code;
};