Blockly.JavaScript['allumer'] = function (block) {

    var val2 = block.getFieldValue('lightAccessories');
    var code = 'functions.homebridge_turnOn("' + val2 + '",globalVariable); \n';
    return code;
};

Blockly.JavaScript['_teindre'] = function (block) {
    var dropdown_trnoff = block.getFieldValue('trnOFF');

    var code = 'functions.homebridge_turnOff("' + dropdown_trnoff + '", globalVariable); \n';
    return code;
};

Blockly.JavaScript['temp_rature_de'] = function (block) {
    var dropdown_name = block.getFieldValue('NAME');
    var variable_state = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('state'), Blockly.Variables.NAME_TYPE);
    var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
    var code = 'functions.homebridge_getTemperature("' + dropdown_name + '", globalVariable,function(' + variable_state + '){' + statements_name + '});\n';
    return [code, Blockly.JavaScript.ORDER_NONE];
};
Blockly.JavaScript['_tat_de'] = function (block) {
    var dropdown_name = block.getFieldValue('NAME');
    var variable_state = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('state'), Blockly.Variables.NAME_TYPE);
    var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
    // TODO: Assemble JavaScript into code variable.
    var code = 'functions.homebridge_getState("' + dropdown_name + '", globalVariable,function(' + variable_state + '){' + statements_name + '});\n';
    // TODO: Change ORDER_NONE to the correct strength.
    return [code, Blockly.JavaScript.ORDER_NONE];
    return code;
};

Blockly.JavaScript['quand'] = function (block) {
    var dropdown_name = block.getFieldValue('NAME');
    var dropdown_state = block.getFieldValue('state');
    var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
    // TODO: Assemble JavaScript into code variable.
    var code = 'globalVariable.event.on("' + dropdown_name + dropdown_state + '",function(){' + statements_name + '});';

    return code;
};

Blockly.JavaScript['pratos_set_state'] = function (block) {
    var dropdown_name = block.getFieldValue('NAME');
    // TODO: Assemble JavaScript into code variable.
    var val = block.getFieldValue('NAME');
    var code = 'functions.pratos_state("' + val + '",globalVariable);';
    return code;
};

Blockly.JavaScript['plugins_do'] = function (block) {

    var dropdown_plugins = block.getFieldValue('plugins');
    var dropdown_name = block.getFieldValue('NAME');
    var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');

    var code = 'functions.pratos_pluginsDo("' + dropdown_plugins + '", "' + dropdown_name + '",globalVariable ,function(){' + statements_name + '});';

    return code;
};

Blockly.JavaScript['datetime'] = function (block) {
    var number_day = block.getFieldValue('day');
    var number_month = block.getFieldValue('month');
    var number_year = block.getFieldValue('year');
    var number_hour = block.getFieldValue('hour');
    var number_minutes = block.getFieldValue('minutes');
    var number_seconds = block.getFieldValue('seconds');
    var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
    // TODO: Assemble JavaScript into code variable.
    var code = '\nfunctions.init_require("node-schedule",function(schedule){\nschedule.scheduleJob(new Date(' + number_year + ', ' + (parseInt(number_month) - 1) + ', ' + number_day + ', ' + number_hour + ', ' + number_minutes + ', ' + number_seconds + '),function(){\n ' + statements_name + '\n});\n});';
    return code;
};

Blockly.JavaScript['cronjob'] = function (block) {
    var text_cronval = block.getFieldValue('cronval');
    var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
    // TODO: Assemble JavaScript into code variable.
    var val = block.getFieldValue('cronval');
    var code = '\nfunctions.init_require("node-schedule",function(schedule){\n schedule.scheduleJob("' + val + '", function(){ ' + statements_name + '});\n});';
    return code;
};

Blockly.JavaScript['get_date'] = function (block) {
    // TODO: Assemble JavaScript into code variable.
    var code = 'Date.now()';
    // TODO: Change ORDER_NONE to the correct strength.
    return [code, Blockly.JavaScript.ORDER_NONE];
};
Blockly.JavaScript['timeout'] = function (block) {
    var number_sec = block.getFieldValue('sec');
    var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
    // TODO: Assemble JavaScript into code variable.
    var code = 'setTimeout(function(){' + statements_name + '},' + number_sec + ');';
    return code;
};

Blockly.JavaScript['clearinterval'] = function (block) {
    var value_name = Blockly.JavaScript.valueToCode(block, 'NAME', Blockly.JavaScript.ORDER_ATOMIC);
    // TODO: Assemble JavaScript into code variable.
    var code = 'clearInterval(' + value_name + ');';
    return code;
};

Blockly.JavaScript['setinterval'] = function (block) {
    var number_name = block.getFieldValue('NAME');
    var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
    // TODO: Assemble JavaScript into code variable.
    var code = 'setInterval(function(){' + statements_name + '},' + number_name + ')';
    // TODO: Change ORDER_NONE to the correct strength.
    return [code, Blockly.JavaScript.ORDER_NONE];
};

/*,{
"type": "appreceive",
"message0": "Recevoir  %1 m√©thode %2 %3 %4 %5 %6 %7",
"args0": [{
"type": "field_input",
"name": "path",
"text": "??path??"
},{
"type": "field_dropdown",
"name": "method",
"options": [
[
"GET",
"get"
],
[
"POST",
"post"
],
[
"ALL",
"all"
]
]
},{
"type": "input_dummy"
},{
"type": "field_variable",
"name": "req",
"variable": "req"
},{
"type": "field_variable",
"name": "res",
"variable": "res"
},{
"type": "field_variable",
"name": "globalVariable",
"variable": "globalVariable"
},{
"type": "input_statement",
"name": "NAME"
}
],
"previousStatement": null,
"nextStatement": null,
"colour": 230,
"tooltip": "",
"helpUrl": ""
},
Blockly.JavaScript['appreceive'] = function(block) {
var text_path = block.getFieldValue('path');
var dropdown_method = block.getFieldValue('method');
var variable_req = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('req'), Blockly.Variables.NAME_TYPE);
var variable_res = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('res'), Blockly.Variables.NAME_TYPE);
var variable_globalvariable = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('globalVariable'), Blockly.Variables.NAME_TYPE);
var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
// TODO: Assemble JavaScript into code variable.

var code = 'globalVariable.app.'+ dropdown_method+'(';
return code;
};
 */
Blockly.JavaScript['cmd'] = function (block) {
    var text_cmd = block.getFieldValue('cmd');
    var variable_err = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('err'), Blockly.Variables.NAME_TYPE);
    var variable_rep = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('rep'), Blockly.Variables.NAME_TYPE);
    var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
    // TODO: Assemble JavaScript into code variable.
    var code = '\nfunctions.init_require("node-cmd",function(cmd){\ncmd.get("' + text_cmd + '",function(r_C3_A9ponse, erreur){\n' + statements_name + '\n});});';
    return code;
};

Blockly.JavaScript['portreceive'] = function (block) {
    var text_port = block.getFieldValue('port');
    var text_baudrate = block.getFieldValue('baudRate');
    var variable_data = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('data'), Blockly.Variables.NAME_TYPE);
    var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
    // TODO: Assemble JavaScript into code variable.
    var code = '\nfunctions.init_require("serialport",function(SerialPort){\nvar port = new SerialPort("' + text_port + '", {\nbaudRate: ' + text_baudrate + '\n});\nport.on("data", function (data) {\n' + statements_name + '\n});\n});';
    return code;
};
Blockly.JavaScript['consolelog'] = function (block) {
    var value_name = Blockly.JavaScript.valueToCode(block, 'NAME', Blockly.JavaScript.ORDER_ATOMIC);
    // TODO: Assemble JavaScript into code variable.
    var code = '\nconsole.log(' + value_name + ');';
    return code;
};
Blockly.JavaScript['createobject'] = function(block) {
 var nom = block.getFieldValue('nom');
 var text_port = Blockly.JavaScript.valueToCode(block, 'NAME', Blockly.JavaScript.ORDER_ATOMIC);
 var toInclude = "";

  var code = '{'+ toInclude + text_port+'}';
  return [code, Blockly.JavaScript.ORDER_ATOMIC];
};
Blockly.JavaScript['objetchelper'] = function(block) {
  var text_name = block.getFieldValue('NAME');
  var value_name = Blockly.JavaScript.valueToCode(block, 'NAME', Blockly.JavaScript.ORDER_ATOMIC);
  var text_object2n = block.getFieldValue('object2N');
  var value_obj2 = Blockly.JavaScript.valueToCode(block, 'obj2', Blockly.JavaScript.ORDER_ATOMIC);
  // TODO: Assemble JavaScript into code variable.
  if(text_name){
	 text_name = text_name + ' : ';
 }
 if(value_name == ""){
	 value_name = "''";
 }
 if(text_object2n ){
	 text_object2n = ',' + text_object2n + ' : ';
	 if(value_obj2 == ""){
	value_obj2 = "''";
 }
 }

 else if(value_obj2 != ""){
	 value_obj2  = ',' + value_obj2 ;
 }
 
  var code = text_name + value_name+text_object2n  + value_obj2   ;
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.JavaScript.ORDER_ATOMIC];
};
Blockly.JavaScript['inobject'] = function(block) {
  var value_name = Blockly.JavaScript.valueToCode(block, 'NAME', Blockly.JavaScript.ORDER_ATOMIC);
  var value_lookfor = Blockly.JavaScript.valueToCode(block, 'lookFor', Blockly.JavaScript.ORDER_ATOMIC);
  // TODO: Assemble JavaScript into code variable.
  var code = value_name+value_lookfor ;
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.JavaScript.ORDER_ATOMIC];
};
Blockly.JavaScript['inobjecthelper'] = function(block) {
  var text_name = Blockly.JavaScript.valueToCode(block, 'NAME', Blockly.JavaScript.ORDER_ATOMIC);
  var value_in2 = Blockly.JavaScript.valueToCode(block, 'in2', Blockly.JavaScript.ORDER_ATOMIC);
  if(text_name){
	  text_name = '['+text_name+']'
  }
 var code = text_name + value_in2;
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.JavaScript.ORDER_ATOMIC];
};
Blockly.JavaScript['requete'] = function(block) {
  var value_name = Blockly.JavaScript.valueToCode(block, 'NAME', Blockly.JavaScript.ORDER_ATOMIC);
  var variable_name = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('NAME'), Blockly.Variables.NAME_TYPE);
  var statements_body = Blockly.JavaScript.statementToCode(block, 'body');
  // TODO: Assemble JavaScript into code variable.
    var code = '\nfunctions.init_require("request",function(request){\nrequest('+value_name+', function(requestAnswer){\n });\n});';
  return code;
};
Blockly.JavaScript['objectdelete'] = function(block) {
  var value_name = Blockly.JavaScript.valueToCode(block, 'NAME', Blockly.JavaScript.ORDER_ATOMIC);
  // TODO: Assemble JavaScript into code variable.
  var code = 'delete ' + value_name +';\n';
  return code;
};