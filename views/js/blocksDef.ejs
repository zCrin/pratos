Blockly.Blocks['allumer'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("allumer")
        .appendField(new Blockly.FieldDropdown([["lampe bureau","9"], ["lame chambre","5"], ["projecteur","4"]]), "lightAccessories");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(120);
 this.setTooltip("Allumer un accessoire");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['_teindre'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("éteindre")
        .appendField(new Blockly.FieldDropdown([["option","OPTIONNAME"], ["option","OPTIONNAME"], ["option","OPTIONNAME"]]), "trnOFF");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(345);
 this.setTooltip("Eteindre un objet homebridge");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['temp_rature_de'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("température de")
        .appendField(new Blockly.FieldDropdown([["option","OPTIONNAME"], ["option","OPTIONNAME"], ["option","OPTIONNAME"]]), "NAME");
    this.setOutput(true, null);
    this.setColour(230);
 this.setTooltip("Donne la température de l'objet");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['_tat_de'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("état de ")
        .appendField(new Blockly.FieldDropdown([["option","OPTIONNAME"], ["option","OPTIONNAME"], ["option","OPTIONNAME"]]), "NAME");
    this.setOutput(true, null);
    this.setColour(60);
 this.setTooltip("retourne l'état d'un objet HomeBridge");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['quand'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("quand")
        .appendField(new Blockly.FieldDropdown([["option","OPTIONNAME"], ["option","OPTIONNAME"], ["option","OPTIONNAME"]]), "NAME")
        .appendField("est")
        .appendField(new Blockly.FieldDropdown([["activé","act"], ["désactivé","des"]]), "state");
    this.appendStatementInput("NAME")
        .setCheck(null)
        .setAlign(Blockly.ALIGN_CENTRE);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['pratos_set_state'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("Pratos : ")
        .appendField(new Blockly.FieldDropdown([["redémarrer","restart"], ["arrêter","stop"], ["démarrer","start"]]), "NAME");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['plugins_do'] = {
  init: function() {
    this.appendDummyInput()
        .appendField(new Blockly.FieldDropdown([["pratos_restart_homerbrigde_plugin","b"], ["option","j"], ["option","j"]]), "plugins")
        .appendField(new Blockly.FieldDropdown([["supprimer","delete"], ["activer","activate"], ["désactiver","desactivate"]]), "NAME");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['datetime'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("le")
        .appendField(new Blockly.FieldNumber(1), "day")
        .appendField("/")
        .appendField(new Blockly.FieldNumber(1), "month")
        .appendField("/")
        .appendField(new Blockly.FieldNumber(2018), "year")
        .appendField("à")
        .appendField(new Blockly.FieldNumber(10), "hour")
        .appendField(":")
        .appendField(new Blockly.FieldNumber(0), "minutes")
        .appendField(":")
        .appendField(new Blockly.FieldNumber(0), "seconds");
    this.appendStatementInput("NAME")
        .setCheck(null);
    this.setInputsInline(false);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(45);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['cronjob'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("Tous les ")
        .appendField(new Blockly.FieldTextInput("* * * * *"), "cronval");
    this.appendStatementInput("NAME")
        .setCheck(null);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(0);
 this.setTooltip("Un evenement declencher à l'heure et la date specifié au format CRON (* * * * *) avec le site https://www.freeformatter.com/cron-expression-generator-quartz.html");
 this.setHelpUrl("https://www.freeformatter.com/cron-expression-generator-quartz.html");
  }
};

Blockly.Blocks['get_date'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("date d'aujourd'hui");
    this.setOutput(true, null);
    this.setColour(105);
 this.setTooltip("Retourne la date du jour");
 this.setHelpUrl("");
  }
};