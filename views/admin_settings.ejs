
<!DOCTYPE html>
<html>
	<head>
		<% include includes/head-content.include.ejs %>
		<%	include includes/icons.include.ejs %>
		<%	include includes/css.include.ejs %>

		<script src="/js/jquery-1.11.3.min.js"></script>
		<script src="/js/stay_standalone.js"></script>
		<link rel="stylesheet" type="text/css" href="//maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css"/>
		<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
		<link rel="stylesheet" type="text/css"href="/css/bootstrap-colorpicker.min.css">

		<script src="//code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
	</head>
	<body>

		<% include includes/header.include.ejs %>
		<%- include("includes/navbar.include.ejs", {nav : nav})%>
		<div  id='settings_page'  class='page page-nav'>

<div id="settings-step-back"> <i class='fa fa-chevron-left'></i>  Retour</div>
<div id='settings_main_menu'>
			<h2>Réglages</h2>
<div id='pluginsButton' class='settings_menu_button'>
<i class='fa fa-plug'></i><span>Plugins</span> </div>
<div id='styleButton' class='settings_menu_button'>
<i class='fa fa-pencil'></i><span>Style</span></div>
<div id='conditionsButton' class='settings_menu_button'>
<i class='fa fa-codepen'></i><span>Recettes</span></div>

<% 
		var settingsN = Object.keys(settings);
	var settingsL = settingsN.length;
for(var i = 0; i < settingsL; i++){ %>
	<%- "<div id='"+ settings [settingsN[i]]. buttonName +"'class='settings_menu_button'>"+ settings [settingsN[i]]. buttonIcon +"<span>"+ settings [settingsN[i]].title+"</span></div> "%>
	<%	}
	%>
</div>
<div class='settings_page settings_menu' id='styleBox'>
<h2>Style</h2>
<div id='flexStyle'>
<div>
<h3>Couleur primaire</h3>
<div id="cp8_container">

</div>
</div><div>
<h3>Couleur de l’arrière-plan</h3>
<div id="cp9_container">

</div>
</div>
</div>
<button id='resetColors'>Original</button>
<button id='saveColors'>Sauvegarder</button>
</div>

<div class='settings_page settings_menu' id='conditionsBox'>
<h2>Recettes</h2>
<p>Ici vous pouvez créer/modifier une nouvelle recette, des actions lancées à partir d'évênements, conditions.</p>
<div id='buttonsTopRecipe'>
<button id='createNewRecipe'>Créer une nouvelle recette</button>
<button id='modifyRecipe'>Modifier une recette</button>
</div>
<div id="blocklyDiv"></div>


<textarea id='genratorBlockly'></textarea>


<div id='conditionsButtons'>
<input type='text' placeholder='Nom de la recette' id='saveConditionsFile'/>
<button id='saveConditions' onclick='saveRecipe()'>Sauvegarder</button>
</div>
<div id='deleteConditions'><button onclick='deleteRecipe()' id='deleteConditionsButt'>Supprimer</button></div>
</div>


<div class='settings_page settings_menu' id='pluginsBox'>
<h2>Plugins</h2>

<div id='deletePluginsButton' class='settings_menu_button'>
<i class='fa fa-trash'></i><span>Supprimer</span> </div>

<div id='turnPluginsButton' class='settings_menu_button'>
<i class='fa fa-eye-slash'></i><span>Gérer</span> </div>
</div>

<div class='settings_page settings_pagebox  settings_menu' id='deletePluginsBox'>


</div>

<div class='settings_page settings_pagebox settings_menu' id='turnPluginsBox'>

</div>
<%
for(var i = 0; i < settingsL; i++){ %>
	<%- "<div class='settings_page settings_pagebox settings_menu' id='"+ settings [settingsN[i]].buttonName.replace("Button","Box")+"'>"+ settings [settingsN[i]].boxContent +"</div> "%>
	<%	}
	%>
		<div id='rebootpopup' class='popup'>
			<h2>Redémarrer</h2>
			<p>Pour appliquer les modifications, Pratos doit redémarrer. Voulez-vous redémarrer maintenant ?</p>
					<button onClick='reboot(true)'  id='validate_ban'>Oui</button>
					<button onClick='reboot(false)' id='validate_ban'>Non</button>
		</div>
		</div>

	</body>

	
	<script src='/js/navbar_auto.js'></script>
		<script src="/js/bootstrap-colorpicker.min.js"></script>
 <script src="/socket.io/socket.io.js"></script>

<script>
var show_actual;
var nbLoaded=0;
var workspacePlayground;
var conditionsEditingName;
var modifyBlocks;
</script>

<script>
var loadJS = function (url, implementationCode, location) {

    var scriptTag = document.createElement('script');
    scriptTag.src = url;

    scriptTag.onload = implementationCode;
    scriptTag.onreadystatechange = implementationCode;

    location.appendChild(scriptTag);
};
jQuery.cachedScript = function (url, options) {
    options = $.extend(options || {}, {
            dataType: "script",
            cache: true,
            url: url
        });
    return jQuery.ajax(options);
};

$("#conditionsButton").click(function () {
    loadJS('/js/recipes.js', function () {
        startRecipe();
    }, document.body);
});

$('.page').mousedown(function (e) { //fonction qui permet de cacher les popup lorsqu'on clique a coté
    if (!$(show_actual).is(e.target) // if the target of the click isn't the container
         && $(show_actual).has(e.target).length === 0) { //nor a descendant of the container
        $('.popup').each(function () {
            $(show_actual).hide(1000);
        }); //on cache le popup actuel
    }
});
$(".settings_menu_button").click(menuButton);
function menuButton() {
    var toOpen = $(this).attr("id").replace("Button", "Box");

    $("#" + toOpen).show(500);
    $(this).parent().hide(500);
    $("#settings-step-back").show(100);
}

$("#settings-step-back").click(function () {
    var toClose = '#' + $('.settings_page:visible').attr("id");
    var toOpenButton = toClose.replace("Box", "Button");
    var toOpen = $(toOpenButton).parent();

    $(toClose).hide(500);
    toOpen.show(500);
    if (toOpen.attr('id') == 'settings_main_menu') {
        $("#settings-step-back").hide(100);
    }
});

$("#turnPluginsButton").click(function () {

    loadJS('/js/pluginsManager.js', function () {
        turnPluginStart();
    }, document.body);

});

$("#deletePluginsButton").click(function () {
    loadJS('/js/pluginsManager.js', function () {
        deletePluginStart();
    }, document.body);

});
function is_same(objOne, objTwo) {
    var objOneKeys = Object.keys(objOne),
    objOneLength = objOneKeys.length,
    objTwoKeys = Object.keys(objTwo),
    objTwoLength = objTwoKeys.length;

    if (objOneLength == objTwoLength) {
        for (var i = 0; i < objOneLength; i++) {

            if (objOne[objOneKeys[i]] != objTwo[objTwoKeys[i]]) {
                return false;
            } else if (objOne[objOneKeys[i]] == objTwo[objTwoKeys[i]] && i == (objOneLength - 1)) {
                return true;
            }
        }

    } else {

        return false;
    }
}
function put_in_object(objOne) {
    var objOneKeys = Object.keys(objOne),
    objOneLength = objOneKeys.length;
    var n = Object();
    for (var i = 0; i < objOneLength; i++) {
        n[objOneKeys[i]] = objOne[objOneKeys[i]];
    }

    return n;
}
function reboot(t) {
    if (!t) {
        $(show_actual).hide(1000);
    } else {
        $.get('/reboot/', function (data) {
            if (data == 'rebooting') {
                alert('Pratos is rebooting, please wait');
                setTimeout(function () {
                    location.reload()
                }, 5000);
            } else {
                alert('Erreur');
            }
        });

    }
}

$("#styleButton").click(function () {
 loadJS('/js/styleManager.js', function () {
        startSytleManager();
    }, document.body);
});


</script>
<style>
</style>
		<% 
var contentNames = Object.keys(content);
var contentL = contentNames.length;

		var loaded ={};
		for(var u = 0; u < contentL; u++){ 
var y = new RegExp(content[contentNames[u]].page,'g');
			if(y.test(page_name) && !loaded[content[contentNames[u]].script]){
loaded[content[contentNames[u]].script] == 1;%>
	<%- content[contentNames[u]].script %>
	<%	}}
	%>
</html>
