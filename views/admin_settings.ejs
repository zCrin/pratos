
<!DOCTYPE html>
<html>
	<head>
		<% include includes/head-content.include.ejs %>
		<%	include includes/icons.include.ejs %>
		<%	include includes/css.include.ejs %>

		<script src="/js/jquery-1.11.3.min.js"></script>
		<script src="/js/stay_standalone.js"></script>
		<link rel="stylesheet" type="text/css" href="//maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css"/>
		<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
		<link rel="stylesheet" type="text/css"href="/css/bootstrap-colorpicker.min.css">

		<script src="//code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
	</head>
	<body>

		<% include includes/header.include.ejs %>
		<%- include("includes/navbar.include.ejs", {nav : nav})%>
		<div  id='settings_page'  class='page page-nav'>

<div id="settings-step-back"> <i class='fa fa-chevron-left'></i>  Retour</div>
<div id='settings_main_menu'>
			<h2>Réglages</h2>
<div id='pluginsButton' class='settings_menu_button'>
<i class='fa fa-plug'></i><span>Plugins</span> </div>
<div id='styleButton' class='settings_menu_button'>
<i class='fa fa-pencil'></i><span>Style</span></div>
<div id='conditionsButton' class='settings_menu_button'>
<i class='fa fa-codepen'></i><span>Recettes</span></div>

<% 
		var settingsN = Object.keys(settings);
	var settingsL = settingsN.length;
for(var i = 0; i < settingsL; i++){ %>
	<%- "<div id='"+ settings [settingsN[i]]. buttonName +"'class='settings_menu_button'>"+ settings [settingsN[i]]. buttonIcon +"<span>"+ settings [settingsN[i]].title+"</span></div> "%>
	<%	}
	%>
</div>
<div class='settings_page settings_menu' id='styleBox'>
<h2>Style</h2>
<div id='flexStyle'>
<div>
<h3>Couleur primaire</h3>
<div id="cp8_container">

</div>
</div><div>
<h3>Couleur de l’arrière-plan</h3>
<div id="cp9_container">

</div>
</div>
</div>
<button id='resetColors'>Original</button>
<button id='saveColors'>Sauvegarder</button>
</div>

<div class='settings_page settings_menu' id='conditionsBox'>
<h2>Recettes</h2>
<p>Ici vous pouvez créer/modifier une nouvelle recette, des actions lancées à partir d'évênements, conditions.</p>
<div id='buttonsTopRecipe'>
<button id='createNewRecipe'>Créer une nouvelle recette</button>
<button id='modifyRecipe'>Modifier une recette</button>
</div>
<div id="blocklyDiv"></div>
<%	include includes/xmlBlocksBlockly.include.ejs %>
<!--
<textarea id='genratorBlockly'></textarea>
-->

<div id='conditionsButtons'>
<input type='text' placeholder='Nom de la recette' id='saveConditionsFile'/>
<button id='saveConditions' onclick='saveRecipe()'>Sauvegarder</button>
</div>
<div id='deleteConditions'><button onclick='deleteRecipe()' id='deleteConditionsButt'>Supprimer</button></div>
</div>


<div class='settings_page settings_menu' id='pluginsBox'>
<h2>Plugins</h2>

<div id='deletePluginsButton' class='settings_menu_button'>
<i class='fa fa-trash'></i><span>Supprimer</span> </div>

<div id='turnPluginsButton' class='settings_menu_button'>
<i class='fa fa-eye-slash'></i><span>Gérer</span> </div>
</div>

<div class='settings_page settings_pagebox  settings_menu' id='deletePluginsBox'>


</div>

<div class='settings_page settings_pagebox settings_menu' id='turnPluginsBox'>

</div>
<%
for(var i = 0; i < settingsL; i++){ %>
	<%- "<div class='settings_page settings_pagebox settings_menu' id='"+ settings [settingsN[i]].buttonName.replace("Button","Box")+"'>"+ settings [settingsN[i]].boxContent +"</div> "%>
	<%	}
	%>
		<div id='rebootpopup' class='popup'>
			<h2>Redémarrer</h2>
			<p>Pour appliquer les modifications, Pratos doit redémarrer. Voulez-vous redémarrer maintenant ?</p>
					<button onClick='reboot(true)'  id='validate_ban'>Oui</button>
					<button onClick='reboot(false)' id='validate_ban'>Non</button>
		</div>
		</div>

	</body>

	
	<script src='/js/navbar_auto.js'></script>
		<script src="/js/bootstrap-colorpicker.min.js"></script>
 <script src="/socket.io/socket.io.js"></script>

<script>
var show_actual;
var nbLoaded=0;
var workspacePlayground;
var conditionsEditingName;
var modifyBlocks;
function deleteRecipe(){		
$('#rebootpopup').html("<h2>Supprimer</h2><p>Voulez-vous vraiment supprimer cette recette</p><button onClick='validateDeleteRecipe(true)'  id='validate_ban'>Oui</button><button onClick='reboot(false)' id='validate_ban'>Non</button>");
$('#rebootpopup').show(1000);
show_actual = '#rebootpopup';
$('html, body').animate({
        scrollTop: $('h1').offset().top
    }, 500);
}
function validateDeleteRecipe(state){
if(state){
var recipeId = $("#saveConditionsFile").attr('idRecipe');
$.post("/recipe_delete/",{recipeId:recipeId},function(data){
if(data == '1'){
reload_recipesList(function(){
$("#modifyRecipe").click();
});
$('#rebootpopup').html("<h2>Redémarrer</h2><p>Pour supprimer cette recette, Pratos doit redémarrer. Voulez-vous redémarrer maintenant ?</p><button onClick='reboot(true)'  id='validate_ban'>Oui</button><button onClick='reboot(false)' id='validate_ban'>Non</button>");
$('#rebootpopup').show(1000);
show_actual = '#rebootpopup';
$('html, body').animate({
        scrollTop: $('h1').offset().top
    }, 500);
}else if(data == '01'){
$('#rebootpopup').html("<h2>Erreur</h2><p>Impossible de supprimer cette recette car elle n'existe pas...</p><button onClick='reboot(false)' id='validate_ban'>OK</button>");
$('#rebootpopup').show(1000);
show_actual = '#rebootpopup';
$('html, body').animate({
        scrollTop: $('h1').offset().top
    }, 500);
}else{
$('#rebootpopup').html("<h2>Erreur</h2><button onClick='reboot(false)' id='validate_ban'>OK</button>");
$('#rebootpopup').show(1000);
show_actual = '#rebootpopup';
$('html, body').animate({
        scrollTop: $('h1').offset().top
    }, 500);
}
});
}
}
var loadJS = function(url, implementationCode, location){
    //url is URL of external file, implementationCode is the code
    //to be called from the file, location is the location to 
    //insert the <script> element

    var scriptTag = document.createElement('script');
    scriptTag.src = url;

    scriptTag.onload = implementationCode;
    scriptTag.onreadystatechange = implementationCode;

    location.appendChild(scriptTag);
};
function updateRecipe(recipeName,recipeId){
$.post("/recipe_code/",{recipeId:recipeId},function(data){
$("#blocklyDiv").html("");
$("#blocklyDiv").css("width","100%");
$("#genratorBlockly").css("width","100%");
$("#genratorBlockly").css("height","200px");
$("#blocklyDiv").fadeIn(1000); 
$("#saveConditionsFile").val(recipeName);
$("#saveConditionsFile").attr('idRecipe',recipeId);

workspacePlayground = Blockly.inject('blocklyDiv',{toolbox: document.getElementById('toolbox')});

workspacePlayground.clear();

Blockly.Xml. domToWorkspace(workspacePlayground, Blockly.Xml.textToDom(data));
function myUpdateFunction(event) {
  var code = Blockly.JavaScript.workspaceToCode(workspacePlayground);
  
}

workspacePlayground.addChangeListener(myUpdateFunction);
//$("#createNewRecipe").fadeOut(500);
$("#saveConditions").fadeIn(500);
$("#saveConditionsFile").fadeIn(500);
$("#deleteConditions").fadeIn(500);

});
}
function saveRecipe(){
var q = $("#saveConditionsFile").val();
var code = Blockly.JavaScript.workspaceToCode(workspacePlayground);
var wk = Blockly.Xml .domToText (Blockly.Xml.workspaceToDom(workspacePlayground));
var idRecipe = ($("#saveConditionsFile").attr('idRecipe'))?$("#saveConditionsFile").attr('idrecipe'):0;


$.post('/conditionsRegister',{name:q,code:code ,workspace:wk,recipeId:idRecipe},function(data){
data = parseInt(data);
if(data){
if(idRecipe==0){
reload_recipesList(function(){
$("#modifyRecipe").click();
});
}else{
 reload_recipesList();
 }
		$('#rebootpopup').html("<h2>Redémarrer</h2><p>Pour appliquer votre recette, Pratos doit redémarrer. Voulez-vous redémarrer maintenant ?</p><button onClick='reboot(true)'  id='validate_ban'>Oui</button><button onClick='reboot(false)' id='validate_ban'>Non</button>");
$('#rebootpopup').show(1000);
show_actual = '#rebootpopup';
$('html, body').animate({
        scrollTop: $('h1').offset().top
    }, 500);
}
else{

}});}



$("#modifyRecipe").click(function(){
$("#blocklyDiv").html("");
var we =  Object.keys(modifyBlocks.recipes),
w = we.length;
for(var c=0;c<w;c++){
$("#blocklyDiv").append(
"<div class='updateRecipeSelect' onclick='updateRecipe(\""+ modifyBlocks.recipes[we[c]]+"\",\""+ we[c] +"\")'>"+ modifyBlocks.recipes[we[c]]+"</div>");

}
$("#blocklyDiv").fadeIn(500);
});
$("#conditionsButton").click(function(){
$("#createNewRecipe").hide(0);
$("#saveConditions").hide(0);
$("#deleteConditions").hide(0);
$("#saveConditionsFile").hide(0);
$.cachedScript( "https://cdn.jsdelivr.net/npm/blockly@1.0.0/blockly_compressed.js" ).done(function( script, textStatus ) {
$.cachedScript( "https://cdn.jsdelivr.net/npm/blockly@1.0.0/blocks_compressed.js" ).done(function( script, textStatus ){


  $.cachedScript( "https://cdn.jsdelivr.net/npm/blockly@1.0.0/msg/js/fr.js" ).done(function( script, textStatus ) {
$.cachedScript( "https://cdn.jsdelivr.net/npm/blockly@1.0.0/javascript_compressed.js" ).done(function( script, textStatus ) {
loadJS('/blocks.js', function(){
loadJS('/js/stub.ejs', function(){


         $("#createNewRecipe").fadeIn(1000); 
$.getJSON('/recipes_list/',function(data){
modifyBlocks=data;
$("#deleteConditions").hide(0);
         $("#modifyRecipe").fadeIn(1000); 

});

}, document.body);
}, document.body);
});
});
});



});

});




jQuery.cachedScript = function( url, options ) {
 
  // Allow user to set any option except for dataType, cache, and url
  options = $.extend( options || {}, {
    dataType: "script",
    cache: true,
    url: url
  });
 
  // Use $.ajax() since it is more flexible than $.getScript
  // Return the jqXHR object so we can chain callbacks
  return jQuery.ajax( options );
};
 
// Usage

		$('.page').mousedown(function(e){ //fonction qui permet de cacher les popup lorsqu'on clique a coté
			if(! $(show_actual).is(e.target) // if the target of the click isn't the container
				&&  $(show_actual).has(e.target).length === 0){ //nor a descendant of the container
   				$('.popup').each(function(){
					$(show_actual).hide(1000);
});//on cache le popup actuel
			}
		});

$(".settings_menu_button").click(menuButton);
function menuButton(){
var toOpen = $(this).attr("id").replace("Button","Box");

$("#"+toOpen).show(500);
$(this).parent().hide(500);
$("#settings-step-back").show(100);
}


$("#settings-step-back").click(function(){
	var toClose = '#'+$('.settings_page:visible').attr("id");
	var toOpenButton = toClose.replace("Box","Button");
var toOpen = $(toOpenButton).parent();

	


	
$(toClose).hide(500);
toOpen.show(500);
if(toOpen.attr('id') == 'settings_main_menu'){
$("#settings-step-back").hide(100);
}
});
$("#turnPluginsButton").click(function(){
$.getJSON("/list_plugins/",function(data){
var old = put_in_object(data.plugins);
var pluginsName = Object.keys(data.plugins),
	dataLength = pluginsName.length;
var txt ='';
var arrayCheck = ['','checked'];
for(var i = 0; i < dataLength; i++){

txt += '<div class="downloaded_plugin"><div class="downloaded_plugin_name">'+ pluginsName[i].replace('pratos_',''). replace('_plugin','') + '</div><label class="switch"><input '+ arrayCheck[data.plugins [pluginsName[i]]] + '  type="checkbox" id="'+ pluginsName[i]+'"><span class="sliderSettings round"></span></label></div>';

}
$("#turnPluginsBox").html('<h2>Gérer</h2> '+txt);
$(".switch > input").unbind();
$(".switch > input").change(function(){
var type = 0;
$(".savedPluginsTurn").remove();
if($(this).is(":checked")){type=1;}
data.plugins[$(this).attr('id')] = type;
if(!is_same(data.plugins,old)){

$("#turnPluginsBox").append("<div class='savedPluginsTurn ' id='savedPlugins'><button>Sauvegarder</button></div>");
$('.savedPluginsTurn').show(1000);
$(".savedPluginsTurn > button").unbind();
$(".savedPluginsTurn > button").click(function(){

$.post('/toggle_plugins/', {pluginsList:data},function(response){
if(response == 'reboot_allowed'){
		$('#rebootpopup').html("<h2>Redémarrer</h2><p>Pour appliquer les modifications, Pratos doit redémarrer. Voulez-vous redémarrer maintenant ?</p><button onClick='reboot(true)'  id='validate_ban'>Oui</button><button onClick='reboot(false)' id='validate_ban'>Non</button>");
$('#rebootpopup').show(1000);
show_actual = '#rebootpopup';
}
else{
alert('Erreur');
}
});

});
}
else{
$('.savedPluginsTurn').hide(1000);
$(".savedPluginsTurn").remove();
}
});
});

});

$("#deletePluginsButton").click(function(){
$.getJSON("/list_plugins/",function(data){
var pluginsName = Object.keys(data.plugins),
	dataLength = pluginsName.length;
var txt ='';
var arrayCheck = ['inactive_plugin','active_plugin'];
for(var i = 0; i < dataLength; i++){

txt += '<div class="downloaded_plugin '+ arrayCheck[data.plugins [pluginsName[i]]] + '"><div class="downloaded_plugin_name">'+ pluginsName[i].replace('pratos_',''). replace('_plugin','') + '</div><input  class="delete_plugin_check" type="checkbox"></div>';

}
$("#deletePluginsBox").html('<h2>Supprimer</h2> '+ txt);
$(".delete_plugin_check").change(function(){
var has_checked = 0;
var listPlugins = Array();
$(".delete_plugin_check").each(function(){

if($(this).is(':checked')){
listPlugins.push('pratos_'  + $(this).siblings('.downloaded_plugin_name').text() + '_plugin');
has_checked = 1;
}

});
if(has_checked){
has_checked=0;
$(".savedPluginsDelete").remove();
$("#deletePluginsBox").append("<div class='savedPluginsDelete' id='savedPlugins'><button>Sauvegarder</button></div>");

$('.savedPluginsDelete').show(1000);
$(".savedPluginsDelete > button"). unbind();
$(".savedPluginsDelete > button"). click(function(){


$.post('/remove_plugins/', {pluginsList:listPlugins},function(response){
if(response == 'reboot_allowed'){
		$('#rebootpopup').html("<h2>Redémarrer</h2><p>Pour appliquer les modifications, Pratos doit redémarrer. Voulez-vous redémarrer maintenant ?</p><button onClick='reboot(true)'  id='validate_ban'>Oui</button><button onClick='reboot(false)' id='validate_ban'>Non</button>");
$('#rebootpopup').show(1000);
show_actual = '#rebootpopup';
}
else{
alert('Erreur');
}
});
});
}
else{
$('.savedPluginsDelete').hide(1000);
$(".savedPluginsDelete").remove();
}
});
});

});
function is_same(objOne, objTwo){
var objOneKeys = Object.keys(objOne),
	objOneLength = objOneKeys.length,
	objTwoKeys = Object.keys(objTwo),
	objTwoLength = objTwoKeys.length;

if(objOneLength==objTwoLength){
for(var i = 0; i < objOneLength; i++){

if(objOne[objOneKeys[i]] != objTwo[objTwoKeys[i]]){
return false;
}
else if(objOne[objOneKeys[i]] == objTwo[objTwoKeys[i]] && i == (objOneLength-1)){
return true;
}
}

}
else{

return false;
}
}
function put_in_object(objOne){
var objOneKeys = Object.keys(objOne),
	objOneLength = objOneKeys.length;
var n = Object();
for(var i = 0; i < objOneLength; i++){
n[objOneKeys[i]] = objOne[objOneKeys[i]];
}

return n;
}
function reboot(t){
if(!t){
		$(show_actual).hide(1000);
}
else{
$.get('/reboot/',function(data){
	if(data == 'rebooting'){
		alert('Pratos is rebooting, please wait');
		setTimeout(function(){location.reload()},5000);
}
else{
alert('Erreur');
}
});

}
}
function reload_recipesList(callback){
$.getJSON('/recipes_list/',function(data){
modifyBlocks=data;
if(callback){
callback();
}
});
}
$("#createNewRecipe").click(function(){

$("#blocklyDiv").html("");
$("#blocklyDiv").css("width","100%");
$("#genratorBlockly").css("width","100%");
$("#genratorBlockly").css("height","200px");
$("#blocklyDiv").fadeIn(1000);
$("#saveConditionsFile").removeAttr('idRecipe');
workspacePlayground = Blockly.inject('blocklyDiv',{toolbox: document.getElementById('toolbox')});

function myUpdateFunction(event) {
  var code = Blockly.JavaScript.workspaceToCode(workspacePlayground);
  //document.getElementById('genratorBlockly').value = code;
}
workspacePlayground.addChangeListener(myUpdateFunction);
//$("#createNewRecipe").fadeOut(500);
$("#saveConditions").fadeIn(500);
$("#saveConditionsFile").fadeIn(500);


});
function condtionsSaveForce(sate){
if(sate){
		$(show_actual).hide(1000);
var q = $("#saveConditionsFile").val();
var code = Blockly.JavaScript.workspaceToCode(workspacePlayground);
var wk = Blockly.Xml .domToText (Blockly.Xml.workspaceToDom(workspacePlayground));

$.post('/conditionsRegister',{name:q,code:code,changeConfirmed:"true",workspace:wk},function(data){
reload_recipesList();
data = parseInt(data);
if(data){
		$('#rebootpopup').html("<h2>Redémarrer</h2><p>Pour appliquer votre recette, Pratos doit redémarrer. Voulez-vous redémarrer maintenant ?</p><button onClick='reboot(true)'  id='validate_ban'>Oui</button><button onClick='reboot(false)' id='validate_ban'>Non</button>");
$('#rebootpopup').show(1000);
show_actual = '#rebootpopup';
$('html, body').animate({
        scrollTop: $('h1').offset().top
    }, 500);
}
else{
alert('erreur');
}
});
}else{
		$(show_actual).hide(1000);
}
}
$("#styleButton").click(function(){
var global_color = $("h2").css("color");
var background_color = $("body").css("background-color");
    $('#cp8_container').colorpicker({
      color: global_color,
      inline: true,
      container: true,
useAlpha: false,
format: "rgba"
    }). on('colorpickerChange colorpickerCreate', function (e) {
        
           $("h1,h2, #nav .fa-bars, #nav .closebtn, #nav .colored, #menu-step-back").css('color', e.color.toRgbString());
           $("header,  .settings_menu_button,#nav .colored").css('border-color', e.color.toRgbString());
           $(".settings_pagebox input:checked").css('background-color', e.color.toRgbString());

        $('#nav').addClass('full-nav'). promise().done(function(){ 
           $(".full-nav").css('border-color', e.color.toRgbString()) .promise().done(function(){ 
        $('#nav').removeClass('full-nav');
});
});
});
    $('#cp9_container').colorpicker({
      color: background_color,
      inline: true,
      container: true,

format: "rgba",
useAlpha: false,
		
    }). on('colorpickerChange colorpickerCreate', function (e) {
        $('#nav').addClass('full-nav'). promise().done(function(){ 
           $(".full-nav").css('background-color', e.color.toRgbString()) .promise().done(function(){ 
        $('#nav').removeClass('full-nav');
});
});

           $("html,body").css('background-color', e.color.toRgbString());
           $("#nav .not_colored").css('color', e.color.toRgbString());

});

});
$("#resetColors").click(function(){
  $('#cp9_container'). colorpicker('setValue',"#350E00");
  $('#cp8_container'). colorpicker('setValue',"#05FEFF");
});
$("#saveColors").click(function(){


var colorSet = 0;
var socket = io.connect("//" + document.domain, {secure: true});
var lastReceived;
var nC = $('#cp8_container').data('colorpicker').color. toRgbString();
var nO = $('#cp9_container').data('colorpicker').color. toRgbString();
 socket.on('connect', function(data) {
if(!colorSet){
	
    socket.emit('updateCSSRequest', nC, nO);
$("#styleBox button").hide(1000);
$("#flexStyle").html("<div id='progressbar'></div> <div id='styleState'>Chargement...<br /> Cela peut prendre quelques minutes. </div>");
$( "#progressbar" ).progressbar({
      value: false
    });
$( "#progressbar" ).find( ".ui-progressbar-value" ).css("background-color",nC);
socket.on('disconnect',function(){alert('eror socket disconnected');});

		socket.on('ping',function(data){
			socket.emit('pong');
			
		});
socket.on('updateCSSERROR',function(x){alert(x);});
	socket.on('updateCSS', function(ans,step) {
setInterval(function(){socket.emit('updateCSSRECONNECTION');},1000);
setTimeout(function(){alert("Quelque chose a disfonctionné");location.reload();},360000);

if(step == 6){
socket.emit('updateCSSConfirm');
setTimeout(function(){location.reload();},2000);

}

colorSet = 1;
});
}
});
});


</script>
<style>
</style>
		<% 
var contentNames = Object.keys(content);
var contentL = contentNames.length;

		var loaded ={};
		for(var u = 0; u < contentL; u++){ 
var y = new RegExp(content[contentNames[u]].page,'g');
			if(y.test(page_name) && !loaded[content[contentNames[u]].script]){
loaded[content[contentNames[u]].script] == 1;%>
	<%- content[contentNames[u]].script %>
	<%	}}
	%>
</html>
